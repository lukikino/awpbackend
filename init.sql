-- --------------------------------------------------------
-- 主機:                           127.0.0.1
-- 伺服器版本:                        5.7.21-log - MySQL Community Server (GPL)
-- 伺服器操作系統:                      Win64
-- HeidiSQL 版本:                  9.5.0.5196
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;


-- 傾印 pcb 的資料庫結構
CREATE DATABASE IF NOT EXISTS `pcb` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `pcb`;

-- 傾印  表格 pcb.behaviors 結構
CREATE TABLE IF NOT EXISTS `behaviors` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `pcb_id` int(10) unsigned NOT NULL,
  `round_id` int(10) unsigned NOT NULL,
  `enter_or_exit_free` bit(1) DEFAULT NULL,
  `scatter_select` int(11) DEFAULT NULL,
  `enter_or_exit_fever` bit(1) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `pcb_id` (`pcb_id`),
  CONSTRAINT `FK_behaviors_machines` FOREIGN KEY (`pcb_id`) REFERENCES `machines` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='使用者行為，一般不會紀錄的東西';

-- 正在傾印表格  pcb.behaviors 的資料：~0 rows (大約)
DELETE FROM `behaviors`;
/*!40000 ALTER TABLE `behaviors` DISABLE KEYS */;
/*!40000 ALTER TABLE `behaviors` ENABLE KEYS */;

-- 傾印  表格 pcb.currencies 結構
CREATE TABLE IF NOT EXISTS `currencies` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='幣別對應表';

-- 正在傾印表格  pcb.currencies 的資料：~1 rows (大約)
DELETE FROM `currencies`;
/*!40000 ALTER TABLE `currencies` DISABLE KEYS */;
INSERT INTO `currencies` (`id`, `name`) VALUES
	(1, 'twd');
/*!40000 ALTER TABLE `currencies` ENABLE KEYS */;

-- 傾印  表格 pcb.log_machine_change 結構
CREATE TABLE IF NOT EXISTS `log_machine_change` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `machine_id` int(10) unsigned NOT NULL,
  `action` int(10) unsigned NOT NULL,
  `memo` varchar(200) DEFAULT '',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `FK_log_machine_change_machines` (`machine_id`),
  CONSTRAINT `FK_log_machine_change_machines` FOREIGN KEY (`machine_id`) REFERENCES `machines` (`id`) ON DELETE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='機器更改紀錄';

-- 正在傾印表格  pcb.log_machine_change 的資料：~0 rows (大約)
DELETE FROM `log_machine_change`;
/*!40000 ALTER TABLE `log_machine_change` DISABLE KEYS */;
/*!40000 ALTER TABLE `log_machine_change` ENABLE KEYS */;

-- 傾印  表格 pcb.log_user_change 結構
CREATE TABLE IF NOT EXISTS `log_user_change` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned DEFAULT NULL,
  `action` int(10) unsigned NOT NULL,
  `memo` varchar(200) DEFAULT '',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `FK_log_user_change_users` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=719 DEFAULT CHARSET=utf8 COMMENT='使用者變更記錄';

-- 正在傾印表格  pcb.log_user_change 的資料：~642 rows (大約)
DELETE FROM `log_user_change`;
/*!40000 ALTER TABLE `log_user_change` DISABLE KEYS */;
INSERT INTO `log_user_change` (`id`, `user_id`, `action`, `memo`, `created_time`, `update_time`) VALUES
	(2, NULL, 3, 'User changed password', '2018-07-30 11:39:25', '2018-07-30 11:39:25'),
	(44, 2, 2, 'Set deactive by user 1', '2018-05-14 15:43:46', '2018-05-14 15:43:46'),
	(48, 2, 2, 'Set active by user 1', '2018-05-14 15:43:48', '2018-05-14 15:43:48'),
	(51, 2, 2, 'Set deactive by user 1', '2018-05-14 15:43:50', '2018-05-14 15:43:50'),
	(54, 2, 2, 'Set active by user 1', '2018-05-14 15:43:51', '2018-05-14 15:43:51'),
	(58, 2, 2, 'Set deactive by user 1', '2018-05-14 15:45:18', '2018-05-14 15:45:18'),
	(62, 2, 2, 'Set active by user 1', '2018-05-14 15:45:21', '2018-05-14 15:45:21'),
	(63, 2, 2, 'Set deactive by user 1', '2018-05-14 15:45:22', '2018-05-14 15:45:22'),
	(67, 2, 2, 'Set active by user 1', '2018-05-14 15:45:24', '2018-05-14 15:45:24'),
	(70, 2, 2, 'Set deactive by user 1', '2018-05-14 15:45:27', '2018-05-14 15:45:27'),
	(76, 2, 1, 'Password changed by user 1', '2018-05-14 16:16:06', '2018-05-14 16:16:06'),
	(85, 2, 1, 'Password changed by user 1', '2018-05-14 17:08:34', '2018-05-14 17:08:34'),
	(86, 2, 1, 'Password changed by user 1', '2018-05-14 17:09:09', '2018-05-14 17:09:09'),
	(89, 2, 2, 'Set active by user 1', '2018-05-14 17:11:22', '2018-05-14 17:11:22'),
	(91, NULL, 1, 'Try login not exist account: a.IP: d', '2018-05-31 16:33:20', '2018-05-31 16:33:20'),
	(92, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:54861', '2018-05-31 16:33:36', '2018-05-31 16:33:36'),
	(93, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:54204', '2018-05-31 16:33:36', '2018-05-31 16:33:36'),
	(94, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:54204', '2018-05-31 16:33:55', '2018-05-31 16:33:55'),
	(95, NULL, 1, 'Try login not exist account: h.IP: d', '2018-05-31 16:34:40', '2018-05-31 16:34:40'),
	(96, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:54204', '2018-05-31 16:35:01', '2018-05-31 16:35:01'),
	(97, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:54204', '2018-05-31 16:35:06', '2018-05-31 16:35:06'),
	(98, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:55038', '2018-05-31 16:35:50', '2018-05-31 16:35:50'),
	(99, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:55038', '2018-05-31 16:36:29', '2018-05-31 16:36:29'),
	(100, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:55038', '2018-05-31 16:36:40', '2018-05-31 16:36:40'),
	(101, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:55147', '2018-05-31 16:36:40', '2018-05-31 16:36:40'),
	(102, NULL, 1, 'Try login not exist account: h.IP: 127.0.0.1:55251', '2018-05-31 16:37:38', '2018-05-31 16:37:38'),
	(103, NULL, 1, 'Try login not exist account: fdsf.IP: 127.0.0.1:55255', '2018-05-31 16:39:24', '2018-05-31 16:39:24'),
	(104, NULL, 1, 'Try login not exist account: fdsf.IP: 127.0.0.1:55255', '2018-05-31 16:39:31', '2018-05-31 16:39:31'),
	(105, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:55255', '2018-05-31 16:41:17', '2018-05-31 16:41:17'),
	(106, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:55255', '2018-05-31 16:41:27', '2018-05-31 16:41:27'),
	(107, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:55255', '2018-05-31 16:41:30', '2018-05-31 16:41:30'),
	(108, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:55255', '2018-05-31 16:41:31', '2018-05-31 16:41:31'),
	(109, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:55255', '2018-05-31 16:41:33', '2018-05-31 16:41:33'),
	(110, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:55255', '2018-05-31 16:42:55', '2018-05-31 16:42:55'),
	(111, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:55255', '2018-05-31 16:42:58', '2018-05-31 16:42:58'),
	(112, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:55255', '2018-05-31 16:42:59', '2018-05-31 16:42:59'),
	(113, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:55255', '2018-05-31 16:43:00', '2018-05-31 16:43:00'),
	(114, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:55255', '2018-05-31 16:43:10', '2018-05-31 16:43:10'),
	(115, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:55255', '2018-05-31 16:43:12', '2018-05-31 16:43:12'),
	(116, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:55255', '2018-05-31 16:43:16', '2018-05-31 16:43:16'),
	(117, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:55255', '2018-05-31 16:43:30', '2018-05-31 16:43:30'),
	(118, 2, 3, 'Password changed by user 1', '2018-05-31 16:45:58', '2018-05-31 16:45:58'),
	(119, 2, 1, 'Login: testtest1.IP:127.0.0.1:56012', '2018-05-31 16:46:03', '2018-05-31 16:46:03'),
	(120, 2, 1, 'Login: testtest1.IP:127.0.0.1:56707', '2018-05-31 16:53:08', '2018-05-31 16:53:08'),
	(121, 2, 1, 'Login: testtest1.IP:127.0.0.1:56849', '2018-05-31 16:54:52', '2018-05-31 16:54:52'),
	(122, 2, 1, 'Login: testtest1.IP:127.0.0.1:56846', '2018-05-31 16:56:21', '2018-05-31 16:56:21'),
	(123, 2, 1, 'Login: testtest1.IP:127.0.0.1:56707', '2018-05-31 17:00:07', '2018-05-31 17:00:07'),
	(124, 2, 1, 'Login: testtest1.IP:127.0.0.1:56849', '2018-05-31 17:02:12', '2018-05-31 17:02:12'),
	(125, 2, 1, 'Login: testtest1.IP:127.0.0.1:56849', '2018-05-31 17:02:19', '2018-05-31 17:02:19'),
	(126, 2, 1, 'Login: testtest1.IP:127.0.0.1:56707', '2018-05-31 17:03:16', '2018-05-31 17:03:16'),
	(127, NULL, 1, 'Try login not exist account: g.IP: 127.0.0.1:58142', '2018-05-31 17:08:07', '2018-05-31 17:08:07'),
	(128, NULL, 1, 'Try login not exist account: t.IP: 127.0.0.1:58267', '2018-05-31 17:08:57', '2018-05-31 17:08:57'),
	(129, NULL, 1, 'Try login not exist account: t.IP: 127.0.0.1:58266', '2018-05-31 17:08:57', '2018-05-31 17:08:57'),
	(130, 2, 1, 'Login: testtest1.IP:127.0.0.1:58264', '2018-05-31 17:09:12', '2018-05-31 17:09:12'),
	(131, 2, 1, 'Login: testtest1.IP:127.0.0.1:58266', '2018-05-31 17:09:12', '2018-05-31 17:09:12'),
	(132, NULL, 1, 'Try login not exist account: tt.IP: 127.0.0.1:58554', '2018-05-31 17:12:05', '2018-05-31 17:12:05'),
	(133, NULL, 1, 'Try login not exist account: tt.IP: 127.0.0.1:58556', '2018-05-31 17:12:05', '2018-05-31 17:12:05'),
	(134, NULL, 1, 'Try login not exist account: .IP: 127.0.0.1:59118', '2018-05-31 17:18:24', '2018-05-31 17:18:24'),
	(135, NULL, 1, 'Try login not exist account: .IP: 127.0.0.1:59113', '2018-05-31 17:19:02', '2018-05-31 17:19:02'),
	(136, NULL, 1, 'Try login not exist account: .IP: 127.0.0.1:59350', '2018-05-31 17:20:56', '2018-05-31 17:20:56'),
	(137, NULL, 1, 'Try login not exist account: g.IP: 127.0.0.1:59355', '2018-05-31 17:21:00', '2018-05-31 17:21:00'),
	(138, NULL, 1, 'Try login not exist account: g.IP: 127.0.0.1:59445', '2018-05-31 17:21:49', '2018-05-31 17:21:49'),
	(139, NULL, 1, 'Try login not exist account: fdf.IP: 127.0.0.1:59448', '2018-05-31 17:21:53', '2018-05-31 17:21:53'),
	(140, NULL, 1, 'Try login not exist account: fdf.IP: 127.0.0.1:59679', '2018-05-31 17:24:09', '2018-05-31 17:24:09'),
	(141, NULL, 1, 'Try login not exist account: fdf.IP: 127.0.0.1:59685', '2018-05-31 17:27:21', '2018-05-31 17:27:21'),
	(142, NULL, 1, 'Try login not exist account: fdf.IP: 127.0.0.1:60065', '2018-05-31 17:28:03', '2018-05-31 17:28:03'),
	(143, NULL, 1, 'Try login not exist account: fdf.IP: 127.0.0.1:60065', '2018-05-31 17:28:20', '2018-05-31 17:28:20'),
	(144, NULL, 1, 'Try login not exist account: fds.IP: 127.0.0.1:60068', '2018-05-31 17:28:30', '2018-05-31 17:28:30'),
	(145, NULL, 1, 'Try login not exist account: f.IP: 127.0.0.1:60214', '2018-05-31 17:29:31', '2018-05-31 17:29:31'),
	(146, 2, 1, 'Login: testtest1.IP:127.0.0.1:60205', '2018-05-31 17:29:41', '2018-05-31 17:29:41'),
	(147, 2, 1, 'Login: testtest1.IP:127.0.0.1:60323', '2018-05-31 17:30:36', '2018-05-31 17:30:36'),
	(148, 2, 1, 'Login: testtest1.IP:127.0.0.1:60336', '2018-05-31 17:30:48', '2018-05-31 17:30:48'),
	(149, 2, 1, 'Login: testtest1.IP:127.0.0.1:60768', '2018-05-31 17:35:04', '2018-05-31 17:35:04'),
	(150, 2, 1, 'Login: testtest1.IP:127.0.0.1:60769', '2018-05-31 17:36:06', '2018-05-31 17:36:06'),
	(151, 2, 1, 'Login: testtest1.IP:127.0.0.1:60770', '2018-05-31 17:36:17', '2018-05-31 17:36:17'),
	(152, 2, 1, 'Login: testtest1.IP:127.0.0.1:61132', '2018-05-31 17:38:53', '2018-05-31 17:38:53'),
	(153, 2, 1, 'Login: testtest1.IP:127.0.0.1:62463', '2018-05-31 17:52:35', '2018-05-31 17:52:35'),
	(154, 2, 1, 'Login: testtest1.IP:127.0.0.1:62933', '2018-05-31 17:57:25', '2018-05-31 17:57:25'),
	(155, 2, 1, 'Login: testtest1.IP:127.0.0.1:63106', '2018-05-31 17:58:49', '2018-05-31 17:58:49'),
	(156, 2, 1, 'Login: testtest1.IP:127.0.0.1:63149', '2018-05-31 17:59:12', '2018-05-31 17:59:12'),
	(157, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:63261', '2018-05-31 18:00:09', '2018-05-31 18:00:09'),
	(158, 2, 1, 'Login: testtest1.IP:127.0.0.1:63561', '2018-05-31 18:03:03', '2018-05-31 18:03:03'),
	(159, 2, 1, 'Login: testtest1.IP:127.0.0.1:63811', '2018-05-31 18:05:16', '2018-05-31 18:05:16'),
	(160, 2, 1, 'Login: testtest1.IP:127.0.0.1:64576', '2018-05-31 18:13:39', '2018-05-31 18:13:39'),
	(161, 2, 1, 'Login: testtest1.IP:127.0.0.1:49355', '2018-05-31 18:25:50', '2018-05-31 18:25:50'),
	(162, 2, 1, 'Login: testtest1.IP:127.0.0.1:49782', '2018-05-31 18:29:51', '2018-05-31 18:29:51'),
	(163, 2, 1, 'Login: testtest1.IP:127.0.0.1:50381', '2018-05-31 18:35:45', '2018-05-31 18:35:45'),
	(164, 2, 1, 'Login: testtest1.IP:127.0.0.1:50424', '2018-05-31 18:36:18', '2018-05-31 18:36:18'),
	(165, 2, 1, 'Login: testtest1.IP:127.0.0.1:50508', '2018-05-31 18:36:44', '2018-05-31 18:36:44'),
	(166, 2, 1, 'Login: testtest1.IP:127.0.0.1:50648', '2018-05-31 18:37:49', '2018-05-31 18:37:49'),
	(167, 2, 1, 'Login: testtest1.IP:127.0.0.1:50678', '2018-05-31 18:38:07', '2018-05-31 18:38:07'),
	(168, 2, 1, 'Login: testtest1.IP:127.0.0.1:63205', '2018-06-01 13:47:24', '2018-06-01 13:47:24'),
	(169, 2, 1, 'Login: testtest1.IP:127.0.0.1:65246', '2018-06-01 14:10:06', '2018-06-01 14:10:06'),
	(170, 2, 1, 'Login: testtest1.IP:127.0.0.1:50340', '2018-06-01 14:26:07', '2018-06-01 14:26:07'),
	(171, 2, 1, 'Login: testtest1.IP:127.0.0.1:50339', '2018-06-01 14:26:07', '2018-06-01 14:26:07'),
	(172, 2, 1, 'Login: testtest1.IP:127.0.0.1:50343', '2018-06-01 14:26:07', '2018-06-01 14:26:07'),
	(173, 2, 1, 'Login: testtest1.IP:127.0.0.1:50344', '2018-06-01 14:26:07', '2018-06-01 14:26:07'),
	(174, 2, 1, 'Login: testtest1.IP:127.0.0.1:50342', '2018-06-01 14:26:07', '2018-06-01 14:26:07'),
	(175, 2, 1, 'Login: testtest1.IP:127.0.0.1:50341', '2018-06-01 14:26:07', '2018-06-01 14:26:07'),
	(176, 2, 1, 'Login: testtest1.IP:127.0.0.1:50369', '2018-06-01 14:26:07', '2018-06-01 14:26:07'),
	(177, 2, 1, 'Login: testtest1.IP:127.0.0.1:50388', '2018-06-01 14:26:20', '2018-06-01 14:26:20'),
	(178, 2, 1, 'Login: testtest1.IP:127.0.0.1:50392', '2018-06-01 14:26:20', '2018-06-01 14:26:20'),
	(179, 2, 1, 'Login: testtest1.IP:127.0.0.1:50396', '2018-06-01 14:26:22', '2018-06-01 14:26:22'),
	(180, 2, 1, 'Login: testtest1.IP:127.0.0.1:50452', '2018-06-01 14:26:53', '2018-06-01 14:26:53'),
	(181, 2, 1, 'Login: testtest1.IP:127.0.0.1:50456', '2018-06-01 14:26:53', '2018-06-01 14:26:53'),
	(182, 2, 1, 'Login: testtest1.IP:127.0.0.1:50462', '2018-06-01 14:26:55', '2018-06-01 14:26:55'),
	(183, 2, 1, 'Login: testtest1.IP:127.0.0.1:50466', '2018-06-01 14:26:56', '2018-06-01 14:26:56'),
	(184, 2, 1, 'Login: testtest1.IP:127.0.0.1:50468', '2018-06-01 14:26:57', '2018-06-01 14:26:57'),
	(185, 2, 1, 'Login: testtest1.IP:127.0.0.1:50476', '2018-06-01 14:27:00', '2018-06-01 14:27:00'),
	(186, 2, 1, 'Login: testtest1.IP:127.0.0.1:50474', '2018-06-01 14:27:00', '2018-06-01 14:27:00'),
	(187, 2, 1, 'Login: testtest1.IP:127.0.0.1:50473', '2018-06-01 14:27:00', '2018-06-01 14:27:00'),
	(188, 2, 1, 'Login: testtest1.IP:127.0.0.1:50475', '2018-06-01 14:27:00', '2018-06-01 14:27:00'),
	(189, 2, 1, 'Login: testtest1.IP:127.0.0.1:50477', '2018-06-01 14:27:00', '2018-06-01 14:27:00'),
	(190, 2, 1, 'Login: testtest1.IP:127.0.0.1:50472', '2018-06-01 14:27:01', '2018-06-01 14:27:01'),
	(191, 2, 1, 'Login: testtest1.IP:127.0.0.1:50489', '2018-06-01 14:27:01', '2018-06-01 14:27:01'),
	(192, 2, 1, 'Login: testtest1.IP:127.0.0.1:50569', '2018-06-01 14:27:55', '2018-06-01 14:27:55'),
	(193, 2, 1, 'Login: testtest1.IP:127.0.0.1:50574', '2018-06-01 14:27:57', '2018-06-01 14:27:57'),
	(194, 2, 1, 'Login: testtest1.IP:127.0.0.1:50578', '2018-06-01 14:27:58', '2018-06-01 14:27:58'),
	(195, 2, 1, 'Login: testtest1.IP:127.0.0.1:50583', '2018-06-01 14:28:02', '2018-06-01 14:28:02'),
	(196, 2, 1, 'Login: testtest1.IP:127.0.0.1:50581', '2018-06-01 14:28:02', '2018-06-01 14:28:02'),
	(197, 2, 1, 'Login: testtest1.IP:127.0.0.1:50584', '2018-06-01 14:28:02', '2018-06-01 14:28:02'),
	(198, 2, 1, 'Login: testtest1.IP:127.0.0.1:50585', '2018-06-01 14:28:02', '2018-06-01 14:28:02'),
	(199, 2, 1, 'Login: testtest1.IP:127.0.0.1:50580', '2018-06-01 14:28:03', '2018-06-01 14:28:03'),
	(200, 2, 1, 'Login: testtest1.IP:127.0.0.1:50582', '2018-06-01 14:28:03', '2018-06-01 14:28:03'),
	(201, 2, 1, 'Login: testtest1.IP:127.0.0.1:50598', '2018-06-01 14:28:03', '2018-06-01 14:28:03'),
	(202, 2, 1, 'Login: testtest1.IP:127.0.0.1:50676', '2018-06-01 14:28:49', '2018-06-01 14:28:49'),
	(203, 2, 1, 'Login: testtest1.IP:127.0.0.1:50766', '2018-06-01 14:29:42', '2018-06-01 14:29:42'),
	(204, 2, 1, 'Login: testtest1.IP:127.0.0.1:51641', '2018-06-01 14:38:46', '2018-06-01 14:38:46'),
	(205, 2, 1, 'Login: testtest1.IP:127.0.0.1:51787', '2018-06-01 14:41:40', '2018-06-01 14:41:40'),
	(206, 2, 1, 'Login: testtest1.IP:127.0.0.1:51783', '2018-06-01 14:41:47', '2018-06-01 14:41:47'),
	(207, NULL, 1, 'Try login not exist account: testtest11.IP: 127.0.0.1:51783', '2018-06-01 14:41:56', '2018-06-01 14:41:56'),
	(208, NULL, 1, 'Try login not exist account: testtest1333.IP: 127.0.0.1:51785', '2018-06-01 14:42:02', '2018-06-01 14:42:02'),
	(209, NULL, 1, 'Try login not exist account: testtest1343.IP: 127.0.0.1:51787', '2018-06-01 14:42:24', '2018-06-01 14:42:24'),
	(210, NULL, 1, 'Try login not exist account: testtest1ff.IP: 127.0.0.1:51782', '2018-06-01 14:42:32', '2018-06-01 14:42:32'),
	(211, NULL, 1, 'Try login not exist account: testtest1ff.IP: 127.0.0.1:52145', '2018-06-01 14:43:52', '2018-06-01 14:43:52'),
	(212, NULL, 1, 'Try login not exist account: testtest1ff.IP: 127.0.0.1:52144', '2018-06-01 14:43:56', '2018-06-01 14:43:56'),
	(213, NULL, 1, 'Try login not exist account: testtest1ff.IP: 127.0.0.1:52162', '2018-06-01 14:43:56', '2018-06-01 14:43:56'),
	(214, 2, 1, 'Login: testtest1.IP:127.0.0.1:52247', '2018-06-01 14:44:43', '2018-06-01 14:44:43'),
	(215, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:52246', '2018-06-01 14:44:48', '2018-06-01 14:44:48'),
	(216, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:52243', '2018-06-01 14:44:52', '2018-06-01 14:44:52'),
	(217, NULL, 1, 'Try login not exist account: testtest122.IP: 127.0.0.1:52247', '2018-06-01 14:44:55', '2018-06-01 14:44:55'),
	(218, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:52248', '2018-06-01 14:45:01', '2018-06-01 14:45:01'),
	(219, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:52243', '2018-06-01 14:45:03', '2018-06-01 14:45:03'),
	(220, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:52247', '2018-06-01 14:45:07', '2018-06-01 14:45:07'),
	(221, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:52245', '2018-06-01 14:45:16', '2018-06-01 14:45:16'),
	(222, NULL, 1, 'Try login not locked account: testtest1.IP: 127.0.0.1:52246', '2018-06-01 14:45:28', '2018-06-01 14:45:28'),
	(223, 2, 1, 'Login: testtest1.IP:127.0.0.1:52244', '2018-06-01 14:45:40', '2018-06-01 14:45:40'),
	(224, NULL, 1, 'Try login not exist account: testtest17.IP: 127.0.0.1:52248', '2018-06-01 14:45:47', '2018-06-01 14:45:47'),
	(225, 2, 1, 'Login: testtest1.IP:127.0.0.1:52248', '2018-06-01 14:46:17', '2018-06-01 14:46:17'),
	(226, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:52244', '2018-06-01 14:46:29', '2018-06-01 14:46:29'),
	(227, 2, 1, 'Login: testtest1.IP:127.0.0.1:52248', '2018-06-01 14:46:32', '2018-06-01 14:46:32'),
	(228, 2, 1, 'Login: testtest1.IP:127.0.0.1:52947', '2018-06-01 14:51:58', '2018-06-01 14:51:58'),
	(229, 2, 1, 'Login: testtest1.IP:127.0.0.1:53057', '2018-06-01 14:52:53', '2018-06-01 14:52:53'),
	(230, 2, 1, 'Login: testtest1.IP:127.0.0.1:53203', '2018-06-01 14:54:25', '2018-06-01 14:54:25'),
	(231, 2, 1, 'Login: testtest1.IP:127.0.0.1:53273', '2018-06-01 14:55:13', '2018-06-01 14:55:13'),
	(232, 2, 1, 'Login: testtest1.IP:127.0.0.1:53395', '2018-06-01 14:55:58', '2018-06-01 14:55:58'),
	(233, 2, 1, 'Login: testtest1.IP:127.0.0.1:53401', '2018-06-01 14:56:13', '2018-06-01 14:56:13'),
	(234, 2, 1, 'Login: testtest1.IP:127.0.0.1:53485', '2018-06-01 14:56:55', '2018-06-01 14:56:55'),
	(235, 2, 1, 'Login: testtest1.IP:127.0.0.1:53484', '2018-06-01 14:59:58', '2018-06-01 14:59:58'),
	(236, 2, 1, 'Login: testtest1.IP:127.0.0.1:57238', '2018-06-01 15:53:05', '2018-06-01 15:53:05'),
	(237, 2, 1, 'Login: testtest1.IP:127.0.0.1:57233', '2018-06-01 15:56:06', '2018-06-01 15:56:06'),
	(238, 2, 1, 'Login: testtest1.IP:127.0.0.1:57233', '2018-06-01 15:56:11', '2018-06-01 15:56:11'),
	(239, 2, 1, 'Login: testtest1.IP:127.0.0.1:57238', '2018-06-01 15:56:17', '2018-06-01 15:56:17'),
	(240, 2, 1, 'Login: testtest1.IP:127.0.0.1:59375', '2018-06-01 15:58:08', '2018-06-01 15:58:08'),
	(241, 2, 1, 'Login: testtest1.IP:127.0.0.1:59380', '2018-06-01 15:59:02', '2018-06-01 15:59:02'),
	(242, 2, 1, 'Login: testtest1.IP:127.0.0.1:59378', '2018-06-01 15:59:07', '2018-06-01 15:59:07'),
	(243, 2, 1, 'Login: testtest1.IP:127.0.0.1:59377', '2018-06-01 15:59:18', '2018-06-01 15:59:18'),
	(244, 2, 1, 'Login: testtest1.IP:127.0.0.1:59690', '2018-06-01 16:01:16', '2018-06-01 16:01:16'),
	(245, 2, 1, 'Login: testtest1.IP:127.0.0.1:59690', '2018-06-01 16:01:27', '2018-06-01 16:01:27'),
	(246, 2, 1, 'Login: testtest1.IP:127.0.0.1:60234', '2018-06-01 16:06:34', '2018-06-01 16:06:34'),
	(247, 2, 1, 'Login: testtest1.IP:127.0.0.1:60363', '2018-06-01 16:07:35', '2018-06-01 16:07:35'),
	(248, 2, 1, 'Login: testtest1.IP:127.0.0.1:60540', '2018-06-01 16:09:19', '2018-06-01 16:09:19'),
	(249, 2, 1, 'Login: testtest1.IP:127.0.0.1:60535', '2018-06-01 16:09:26', '2018-06-01 16:09:26'),
	(250, 2, 1, 'Login: testtest1.IP:127.0.0.1:60537', '2018-06-01 16:09:33', '2018-06-01 16:09:33'),
	(251, 2, 1, 'Login: testtest1.IP:127.0.0.1:60638', '2018-06-01 16:10:13', '2018-06-01 16:10:13'),
	(252, 2, 1, 'Login: testtest1.IP:127.0.0.1:60635', '2018-06-01 16:10:54', '2018-06-01 16:10:54'),
	(253, 2, 1, 'Login: testtest1.IP:127.0.0.1:61018', '2018-06-01 16:14:23', '2018-06-01 16:14:23'),
	(254, 2, 1, 'Login: testtest1.IP:127.0.0.1:61290', '2018-06-01 16:17:12', '2018-06-01 16:17:12'),
	(255, 2, 1, 'Login: testtest1.IP:127.0.0.1:61348', '2018-06-01 16:17:42', '2018-06-01 16:17:42'),
	(256, 2, 1, 'Login: testtest1.IP:127.0.0.1:61344', '2018-06-01 16:17:46', '2018-06-01 16:17:46'),
	(257, 2, 1, 'Login: testtest1.IP:127.0.0.1:61346', '2018-06-01 16:18:07', '2018-06-01 16:18:07'),
	(258, 2, 1, 'Login: testtest1.IP:127.0.0.1:61343', '2018-06-01 16:18:15', '2018-06-01 16:18:15'),
	(259, 2, 1, 'Login: testtest1.IP:127.0.0.1:61462', '2018-06-01 16:18:49', '2018-06-01 16:18:49'),
	(260, 2, 1, 'Login: testtest1.IP:127.0.0.1:61463', '2018-06-01 16:18:54', '2018-06-01 16:18:54'),
	(261, 2, 1, 'Login: testtest1.IP:127.0.0.1:61485', '2018-06-01 16:19:55', '2018-06-01 16:19:55'),
	(262, 2, 1, 'Login: testtest1.IP:127.0.0.1:61864', '2018-06-01 16:22:51', '2018-06-01 16:22:51'),
	(263, 2, 1, 'Login: testtest1.IP:127.0.0.1:62033', '2018-06-01 16:24:37', '2018-06-01 16:24:37'),
	(264, 2, 1, 'Login: testtest1.IP:127.0.0.1:62090', '2018-06-01 16:25:06', '2018-06-01 16:25:06'),
	(265, 2, 1, 'Login: testtest1.IP:127.0.0.1:62163', '2018-06-01 16:25:47', '2018-06-01 16:25:47'),
	(266, 2, 1, 'Login: testtest1.IP:127.0.0.1:62208', '2018-06-01 16:26:15', '2018-06-01 16:26:15'),
	(267, 2, 1, 'Login: testtest1.IP:127.0.0.1:62343', '2018-06-01 16:27:33', '2018-06-01 16:27:33'),
	(268, 2, 1, 'Login: testtest1.IP:127.0.0.1:62413', '2018-06-01 16:28:10', '2018-06-01 16:28:10'),
	(269, 2, 1, 'Login: testtest1.IP:127.0.0.1:62409', '2018-06-01 16:28:22', '2018-06-01 16:28:22'),
	(270, 2, 1, 'Login: testtest1.IP:127.0.0.1:62454', '2018-06-01 16:28:28', '2018-06-01 16:28:28'),
	(271, 2, 1, 'Login: testtest1.IP:127.0.0.1:62480', '2018-06-01 16:28:36', '2018-06-01 16:28:36'),
	(272, 2, 1, 'Login: testtest1.IP:127.0.0.1:62513', '2018-06-01 16:28:50', '2018-06-01 16:28:50'),
	(273, 2, 1, 'Login: testtest1.IP:127.0.0.1:55967', '2018-06-01 18:03:11', '2018-06-01 18:03:11'),
	(274, 2, 1, 'Login: testtest1.IP:127.0.0.1:64502', '2018-06-04 10:53:05', '2018-06-04 10:53:05'),
	(275, 2, 1, 'Login: testtest1.IP:127.0.0.1:51404', '2018-06-04 14:41:04', '2018-06-04 14:41:04'),
	(276, 2, 1, 'Login: testtest1.IP:127.0.0.1:60180', '2018-06-05 11:48:39', '2018-06-05 11:48:39'),
	(277, 2, 1, 'Login: testtest1.IP:127.0.0.1:60249', '2018-06-05 11:49:11', '2018-06-05 11:49:11'),
	(278, 2, 1, 'Login: testtest1.IP:127.0.0.1:60342', '2018-06-05 11:49:54', '2018-06-05 11:49:54'),
	(279, 2, 1, 'Login: testtest1.IP:127.0.0.1:60515', '2018-06-05 11:51:46', '2018-06-05 11:51:46'),
	(280, 2, 1, 'Login: testtest1.IP:127.0.0.1:60700', '2018-06-05 11:53:47', '2018-06-05 11:53:47'),
	(281, 2, 1, 'Login: testtest1.IP:127.0.0.1:60868', '2018-06-05 11:55:42', '2018-06-05 11:55:42'),
	(282, 2, 1, 'Login: testtest1.IP:127.0.0.1:60912', '2018-06-05 11:56:07', '2018-06-05 11:56:07'),
	(283, 2, 1, 'Login: testtest1.IP:127.0.0.1:61135', '2018-06-05 11:58:14', '2018-06-05 11:58:14'),
	(284, 2, 1, 'Login: testtest1.IP:127.0.0.1:61276', '2018-06-05 11:59:49', '2018-06-05 11:59:49'),
	(285, 2, 1, 'Login: testtest1.IP:127.0.0.1:59102', '2018-06-05 15:15:57', '2018-06-05 15:15:57'),
	(286, 2, 1, 'Login: testtest1.IP:127.0.0.1:59205', '2018-06-05 15:16:56', '2018-06-05 15:16:56'),
	(287, 2, 1, 'Login: testtest1.IP:127.0.0.1:59255', '2018-06-05 15:17:18', '2018-06-05 15:17:18'),
	(288, 2, 1, 'Login: testtest1.IP:127.0.0.1:59372', '2018-06-05 15:18:21', '2018-06-05 15:18:21'),
	(289, 2, 1, 'Login: testtest1.IP:127.0.0.1:59731', '2018-06-05 15:21:52', '2018-06-05 15:21:52'),
	(290, 2, 1, 'Login: testtest1.IP:127.0.0.1:59887', '2018-06-05 15:23:09', '2018-06-05 15:23:09'),
	(291, 2, 1, 'Login: testtest1.IP:127.0.0.1:59885', '2018-06-05 15:25:39', '2018-06-05 15:25:39'),
	(292, 2, 1, 'Login: testtest1.IP:127.0.0.1:60233', '2018-06-05 15:26:52', '2018-06-05 15:26:52'),
	(293, 2, 1, 'Login: testtest1.IP:127.0.0.1:60232', '2018-06-05 15:27:09', '2018-06-05 15:27:09'),
	(294, 2, 1, 'Login: testtest1.IP:127.0.0.1:60595', '2018-06-05 15:30:18', '2018-06-05 15:30:18'),
	(295, NULL, 1, 'Try login not exist account: testtest2.IP: 127.0.0.1:61037', '2018-06-05 15:34:55', '2018-06-05 15:34:55'),
	(296, 2, 1, 'Login: testtest1.IP:127.0.0.1:61034', '2018-06-05 15:35:02', '2018-06-05 15:35:02'),
	(297, 2, 1, 'Login: testtest1.IP:127.0.0.1:61125', '2018-06-05 15:35:47', '2018-06-05 15:35:47'),
	(298, 2, 1, 'Login: testtest1.IP:127.0.0.1:61266', '2018-06-05 15:37:11', '2018-06-05 15:37:11'),
	(299, 2, 1, 'Login: testtest1.IP:127.0.0.1:61521', '2018-06-05 15:39:57', '2018-06-05 15:39:57'),
	(300, 204, 1, 'Login: testtest2.IP:127.0.0.1:61584', '2018-06-05 15:40:36', '2018-06-05 15:40:36'),
	(301, 204, 1, 'Login: testtest2.IP:127.0.0.1:61586', '2018-06-05 15:41:44', '2018-06-05 15:41:44'),
	(302, NULL, 1, 'Try login not exist account: testtest12.IP: 127.0.0.1:61582', '2018-06-05 15:41:56', '2018-06-05 15:41:56'),
	(303, 2, 1, 'Login: testtest1.IP:127.0.0.1:61594', '2018-06-05 15:42:02', '2018-06-05 15:42:02'),
	(304, 204, 1, 'Login: testtest2.IP:127.0.0.1:61583', '2018-06-05 15:42:11', '2018-06-05 15:42:11'),
	(305, 2, 1, 'Login: testtest1.IP:127.0.0.1:62982', '2018-06-05 15:55:19', '2018-06-05 15:55:19'),
	(306, NULL, 1, 'Try login not exist account: testtest12.IP: 127.0.0.1:62986', '2018-06-05 15:55:27', '2018-06-05 15:55:27'),
	(307, 204, 1, 'Login: testtest2.IP:127.0.0.1:62988', '2018-06-05 15:55:33', '2018-06-05 15:55:33'),
	(308, 204, 1, 'Login: testtest2.IP:127.0.0.1:64449', '2018-06-05 16:11:08', '2018-06-05 16:11:08'),
	(309, 204, 1, 'Login: testtest2.IP:127.0.0.1:64952', '2018-06-05 16:16:52', '2018-06-05 16:16:52'),
	(310, 204, 1, 'Login: testtest2.IP:127.0.0.1:51978', '2018-06-05 16:56:19', '2018-06-05 16:56:19'),
	(311, 204, 1, 'Login: testtest2.IP:127.0.0.1:52260', '2018-06-05 16:59:05', '2018-06-05 16:59:05'),
	(312, 204, 1, 'Login: testtest2.IP:127.0.0.1:52457', '2018-06-05 17:01:08', '2018-06-05 17:01:08'),
	(313, 204, 1, 'Login: testtest2.IP:127.0.0.1:52948', '2018-06-05 17:06:33', '2018-06-05 17:06:33'),
	(314, 204, 1, 'Login: testtest2.IP:127.0.0.1:52944', '2018-06-05 17:06:43', '2018-06-05 17:06:43'),
	(315, 204, 1, 'Login: testtest2.IP:127.0.0.1:52944', '2018-06-05 17:08:01', '2018-06-05 17:08:01'),
	(316, 204, 1, 'Login: testtest2.IP:127.0.0.1:52947', '2018-06-05 17:09:06', '2018-06-05 17:09:06'),
	(317, 204, 1, 'Login: testtest2.IP:127.0.0.1:52948', '2018-06-05 17:09:16', '2018-06-05 17:09:16'),
	(318, 204, 1, 'Login: testtest2.IP:127.0.0.1:52947', '2018-06-05 17:09:44', '2018-06-05 17:09:44'),
	(319, 204, 1, 'Login: testtest2.IP:127.0.0.1:52949', '2018-06-05 17:10:01', '2018-06-05 17:10:01'),
	(320, 204, 1, 'Login: testtest2.IP:127.0.0.1:52948', '2018-06-05 17:15:54', '2018-06-05 17:15:54'),
	(321, 204, 1, 'Login: testtest2.IP:127.0.0.1:52944', '2018-06-05 17:16:03', '2018-06-05 17:16:03'),
	(322, 204, 1, 'Login: testtest2.IP:127.0.0.1:52944', '2018-06-05 17:16:22', '2018-06-05 17:16:22'),
	(323, 204, 1, 'Login: testtest2.IP:127.0.0.1:52945', '2018-06-05 17:16:31', '2018-06-05 17:16:31'),
	(324, 204, 1, 'Login: testtest2.IP:127.0.0.1:52946', '2018-06-05 17:16:38', '2018-06-05 17:16:38'),
	(325, 204, 1, 'Login: testtest2.IP:127.0.0.1:53904', '2018-06-05 17:26:26', '2018-06-05 17:26:26'),
	(326, 204, 1, 'Login: testtest2.IP:127.0.0.1:53903', '2018-06-05 17:26:58', '2018-06-05 17:26:58'),
	(327, 204, 1, 'Login: testtest2.IP:127.0.0.1:53904', '2018-06-05 17:27:37', '2018-06-05 17:27:37'),
	(328, 204, 1, 'Login: testtest2.IP:127.0.0.1:53904', '2018-06-05 17:27:50', '2018-06-05 17:27:50'),
	(329, 204, 1, 'Login: testtest2.IP:127.0.0.1:55391', '2018-06-05 17:32:34', '2018-06-05 17:32:34'),
	(330, 204, 1, 'Login: testtest2.IP:127.0.0.1:55397', '2018-06-05 17:32:57', '2018-06-05 17:32:57'),
	(331, 204, 1, 'Login: testtest2.IP:127.0.0.1:55391', '2018-06-05 17:33:04', '2018-06-05 17:33:04'),
	(332, 204, 1, 'Login failed: testtest2.IP:127.0.0.1:55396', '2018-06-05 17:33:13', '2018-06-05 17:33:13'),
	(333, 204, 1, 'Login: testtest2.IP:127.0.0.1:55395', '2018-06-05 17:33:26', '2018-06-05 17:33:26'),
	(334, 2, 1, 'Login: testtest1.IP:127.0.0.1:55283', '2018-06-05 17:33:33', '2018-06-05 17:33:33'),
	(335, 204, 1, 'Login: testtest2.IP:127.0.0.1:55516', '2018-06-05 17:33:54', '2018-06-05 17:33:54'),
	(336, 204, 1, 'Login: testtest2.IP:127.0.0.1:55518', '2018-06-05 17:34:11', '2018-06-05 17:34:11'),
	(337, 204, 1, 'Login: testtest2.IP:127.0.0.1:56165', '2018-06-05 17:43:14', '2018-06-05 17:43:14'),
	(338, 204, 1, 'Login: testtest2.IP:127.0.0.1:56458', '2018-06-05 17:43:57', '2018-06-05 17:43:57'),
	(339, 2, 1, 'Login: testtest1.IP:127.0.0.1:56512', '2018-06-05 17:44:20', '2018-06-05 17:44:20'),
	(340, 2, 1, 'Login: testtest1.IP:127.0.0.1:58435', '2018-06-05 18:04:54', '2018-06-05 18:04:54'),
	(341, 204, 1, 'Login failed: testtest2.IP:127.0.0.1:57987', '2018-06-05 18:05:01', '2018-06-05 18:05:01'),
	(342, 204, 1, 'Login: testtest2.IP:127.0.0.1:58433', '2018-06-05 18:05:08', '2018-06-05 18:05:08'),
	(343, 2, 1, 'Login: testtest1.IP:127.0.0.1:58690', '2018-06-05 18:07:41', '2018-06-05 18:07:41'),
	(344, 204, 1, 'Login: testtest2.IP:127.0.0.1:65253', '2018-06-06 17:33:04', '2018-06-06 17:33:04'),
	(345, 2, 1, 'Login: testtest1.IP:127.0.0.1:65255', '2018-06-06 17:33:13', '2018-06-06 17:33:13'),
	(346, 2, 1, 'Login: testtest1.IP:127.0.0.1:49208', '2018-06-06 17:36:31', '2018-06-06 17:36:31'),
	(347, 2, 1, 'Login: testtest1.IP:127.0.0.1:49347', '2018-06-06 17:38:02', '2018-06-06 17:38:02'),
	(348, 2, 1, 'Login: testtest1.IP:127.0.0.1:56644', '2018-06-07 14:26:36', '2018-06-07 14:26:36'),
	(349, 204, 1, 'Login: testtest2.IP:127.0.0.1:57986', '2018-06-07 14:41:28', '2018-06-07 14:41:28'),
	(350, 204, 1, 'Login: testtest2.IP:127.0.0.1:57985', '2018-06-07 14:41:52', '2018-06-07 14:41:52'),
	(351, 2, 1, 'Login: testtest1.IP:127.0.0.1:62347', '2018-06-07 15:32:12', '2018-06-07 15:32:12'),
	(352, 2, 1, 'Login: testtest1.IP:127.0.0.1:62822', '2018-06-07 15:37:14', '2018-06-07 15:37:14'),
	(353, 2, 1, 'Login: testtest1.IP:127.0.0.1:62926', '2018-06-07 15:38:03', '2018-06-07 15:38:03'),
	(354, 205, 1, 'Login: testtest23.IP:127.0.0.1:63078', '2018-06-07 15:39:39', '2018-06-07 15:39:39'),
	(355, 205, 3, 'Password changed by user 205', '2018-06-07 15:40:57', '2018-06-07 15:40:57'),
	(356, 205, 2, 'Set deactive by user 205', '2018-06-07 15:41:57', '2018-06-07 15:41:57'),
	(357, 205, 2, 'Set active by user 205', '2018-06-07 15:41:59', '2018-06-07 15:41:59'),
	(358, 205, 2, 'Set deactive by user 205', '2018-06-07 15:41:59', '2018-06-07 15:41:59'),
	(359, 205, 2, 'Set active by user 205', '2018-06-07 15:42:01', '2018-06-07 15:42:01'),
	(360, 195, 2, 'Set deactive by user 205', '2018-06-07 15:42:01', '2018-06-07 15:42:01'),
	(361, 195, 2, 'Set active by user 205', '2018-06-07 15:42:02', '2018-06-07 15:42:02'),
	(362, 205, 1, 'Login: testtest23.IP:127.0.0.1:51863', '2018-06-07 16:44:29', '2018-06-07 16:44:29'),
	(363, 205, 1, 'Login: testtest23.IP:127.0.0.1:53105', '2018-06-07 16:54:26', '2018-06-07 16:54:26'),
	(364, 204, 1, 'Login: testtest2.IP:127.0.0.1:53107', '2018-06-07 16:57:43', '2018-06-07 16:57:43'),
	(365, 205, 1, 'Login: testtest23.IP:127.0.0.1:53712', '2018-06-07 17:01:10', '2018-06-07 17:01:10'),
	(366, 205, 1, 'Login: testtest23.IP:127.0.0.1:55232', '2018-06-07 17:16:37', '2018-06-07 17:16:37'),
	(367, 205, 1, 'Login: testtest23.IP:127.0.0.1:55229', '2018-06-07 17:16:45', '2018-06-07 17:16:45'),
	(368, 205, 1, 'Login: testtest23.IP:127.0.0.1:55340', '2018-06-07 17:17:32', '2018-06-07 17:17:32'),
	(369, 205, 1, 'Login: testtest23.IP:127.0.0.1:55741', '2018-06-07 17:21:50', '2018-06-07 17:21:50'),
	(370, 205, 1, 'Login: testtest23.IP:127.0.0.1:55792', '2018-06-07 17:22:20', '2018-06-07 17:22:20'),
	(371, 205, 1, 'Login: testtest23.IP:127.0.0.1:63953', '2018-06-08 11:00:58', '2018-06-08 11:00:58'),
	(372, 205, 1, 'Login: testtest23.IP:127.0.0.1:62555', '2018-06-08 14:35:26', '2018-06-08 14:35:26'),
	(373, 205, 1, 'Login: testtest23.IP:127.0.0.1:58713', '2018-06-11 09:41:21', '2018-06-11 09:41:21'),
	(374, 205, 1, 'Login: testtest23.IP:127.0.0.1:59055', '2018-06-11 10:24:28', '2018-06-11 10:24:28'),
	(375, 205, 1, 'Login: testtest23.IP:127.0.0.1:59488', '2018-06-11 13:37:34', '2018-06-11 13:37:34'),
	(376, 205, 1, 'Login: testtest23.IP:127.0.0.1:61208', '2018-06-11 17:20:36', '2018-06-11 17:20:36'),
	(377, 205, 1, 'Login: testtest23.IP:127.0.0.1:61231', '2018-06-11 17:21:07', '2018-06-11 17:21:07'),
	(378, 205, 1, 'Login: testtest23.IP:127.0.0.1:61263', '2018-06-11 17:21:48', '2018-06-11 17:21:48'),
	(379, 205, 1, 'Login: testtest23.IP:127.0.0.1:61335', '2018-06-11 17:35:52', '2018-06-11 17:35:52'),
	(380, 205, 1, 'Login: testtest23.IP:127.0.0.1:61332', '2018-06-11 17:36:06', '2018-06-11 17:36:06'),
	(381, 205, 1, 'Login: testtest23.IP:127.0.0.1:61334', '2018-06-11 17:36:45', '2018-06-11 17:36:45'),
	(382, 205, 1, 'Login: testtest23.IP:127.0.0.1:64562', '2018-06-11 18:12:54', '2018-06-11 18:12:54'),
	(383, 205, 1, 'Login: testtest23.IP:127.0.0.1:64625', '2018-06-11 18:13:26', '2018-06-11 18:13:26'),
	(384, 205, 1, 'Login: testtest23.IP:127.0.0.1:64761', '2018-06-11 18:14:49', '2018-06-11 18:14:49'),
	(385, 205, 1, 'Login: testtest23.IP:127.0.0.1:64978', '2018-06-11 18:17:10', '2018-06-11 18:17:10'),
	(386, 205, 1, 'Login: testtest23.IP:127.0.0.1:49911', '2018-06-12 10:58:55', '2018-06-12 10:58:55'),
	(387, 205, 1, 'Login: testtest23.IP:127.0.0.1:50002', '2018-06-12 10:59:49', '2018-06-12 10:59:49'),
	(388, 205, 1, 'Login: testtest23.IP:127.0.0.1:58980', '2018-06-13 11:45:09', '2018-06-13 11:45:09'),
	(389, 205, 1, 'Login: testtest23.IP:127.0.0.1:59254', '2018-06-13 11:48:03', '2018-06-13 11:48:03'),
	(390, 205, 1, 'Login: testtest23.IP:127.0.0.1:59550', '2018-06-13 11:51:15', '2018-06-13 11:51:15'),
	(391, 205, 1, 'Login: testtest23.IP:127.0.0.1:59549', '2018-06-13 11:52:01', '2018-06-13 11:52:01'),
	(392, 205, 1, 'Login: testtest23.IP:127.0.0.1:59686', '2018-06-13 11:52:30', '2018-06-13 11:52:30'),
	(393, 205, 1, 'Login: testtest23.IP:127.0.0.1:59689', '2018-06-13 11:52:59', '2018-06-13 11:52:59'),
	(394, 205, 1, 'Login: testtest23.IP:127.0.0.1:59691', '2018-06-13 11:53:57', '2018-06-13 11:53:57'),
	(395, 205, 1, 'Login: testtest23.IP:127.0.0.1:59690', '2018-06-13 11:55:02', '2018-06-13 11:55:02'),
	(396, 205, 1, 'Login: testtest23.IP:127.0.0.1:59686', '2018-06-13 11:55:47', '2018-06-13 11:55:47'),
	(397, 205, 1, 'Login: testtest23.IP:127.0.0.1:60106', '2018-06-13 11:57:06', '2018-06-13 11:57:06'),
	(398, 205, 1, 'Login: testtest23.IP:127.0.0.1:60199', '2018-06-13 11:57:43', '2018-06-13 11:57:43'),
	(399, 205, 1, 'Login: testtest23.IP:127.0.0.1:57393', '2018-06-13 14:40:54', '2018-06-13 14:40:54'),
	(400, 205, 1, 'Login: testtest23.IP:127.0.0.1:57913', '2018-06-13 14:46:21', '2018-06-13 14:46:21'),
	(401, 205, 1, 'Login: testtest23.IP:127.0.0.1:58145', '2018-06-13 14:49:01', '2018-06-13 14:49:01'),
	(402, 205, 1, 'Login: testtest23.IP:127.0.0.1:58611', '2018-06-13 14:53:53', '2018-06-13 14:53:53'),
	(403, 205, 1, 'Login: testtest23.IP:127.0.0.1:58759', '2018-06-13 14:55:08', '2018-06-13 14:55:08'),
	(404, 205, 1, 'Login: testtest23.IP:127.0.0.1:59214', '2018-06-13 15:00:20', '2018-06-13 15:00:20'),
	(405, 205, 1, 'Login: testtest23.IP:127.0.0.1:59455', '2018-06-13 15:02:26', '2018-06-13 15:02:26'),
	(406, 205, 1, 'Login: testtest23.IP:127.0.0.1:60380', '2018-06-13 15:12:34', '2018-06-13 15:12:34'),
	(407, 205, 1, 'Login: testtest23.IP:127.0.0.1:60578', '2018-06-13 15:14:26', '2018-06-13 15:14:26'),
	(408, 205, 1, 'Login: testtest23.IP:127.0.0.1:61323', '2018-06-13 15:22:58', '2018-06-13 15:22:58'),
	(409, 205, 1, 'Login: testtest23.IP:127.0.0.1:61396', '2018-06-13 15:23:31', '2018-06-13 15:23:31'),
	(410, 205, 1, 'Login: testtest23.IP:127.0.0.1:61585', '2018-06-13 15:25:39', '2018-06-13 15:25:39'),
	(411, 205, 1, 'Login: testtest23.IP:127.0.0.1:62232', '2018-06-13 15:33:11', '2018-06-13 15:33:11'),
	(412, 205, 1, 'Login: testtest23.IP:127.0.0.1:62490', '2018-06-13 15:35:54', '2018-06-13 15:35:54'),
	(413, 205, 1, 'Login: testtest23.IP:127.0.0.1:62587', '2018-06-13 15:36:54', '2018-06-13 15:36:54'),
	(414, 205, 1, 'Login: testtest23.IP:127.0.0.1:63248', '2018-06-13 15:44:11', '2018-06-13 15:44:11'),
	(415, 205, 1, 'Login: testtest23.IP:127.0.0.1:64078', '2018-06-13 15:53:09', '2018-06-13 15:53:09'),
	(416, 205, 1, 'Login: testtest23.IP:127.0.0.1:64152', '2018-06-13 15:53:46', '2018-06-13 15:53:46'),
	(417, 205, 1, 'Login: testtest23.IP:127.0.0.1:64370', '2018-06-13 15:55:43', '2018-06-13 15:55:43'),
	(418, 205, 1, 'Login: testtest23.IP:127.0.0.1:64463', '2018-06-13 15:56:31', '2018-06-13 15:56:31'),
	(419, 205, 1, 'Login: testtest23.IP:127.0.0.1:50850', '2018-06-13 16:27:28', '2018-06-13 16:27:28'),
	(420, 205, 1, 'Login: testtest23.IP:127.0.0.1:50851', '2018-06-13 16:28:50', '2018-06-13 16:28:50'),
	(421, 205, 1, 'Login: testtest23.IP:127.0.0.1:51240', '2018-06-13 16:31:29', '2018-06-13 16:31:29'),
	(422, 205, 1, 'Login: testtest23.IP:127.0.0.1:56315', '2018-06-13 17:30:54', '2018-06-13 17:30:54'),
	(423, 205, 1, 'Login: testtest23.IP:127.0.0.1:56529', '2018-06-13 17:33:07', '2018-06-13 17:33:07'),
	(424, 205, 1, 'Login: testtest23.IP:127.0.0.1:56653', '2018-06-13 17:34:31', '2018-06-13 17:34:31'),
	(425, 205, 1, 'Login: testtest23.IP:127.0.0.1:57110', '2018-06-13 17:39:15', '2018-06-13 17:39:15'),
	(426, 205, 1, 'Login: testtest23.IP:127.0.0.1:57157', '2018-06-13 17:39:38', '2018-06-13 17:39:38'),
	(427, 205, 1, 'Login: testtest23.IP:127.0.0.1:57208', '2018-06-13 17:39:59', '2018-06-13 17:39:59'),
	(428, 205, 1, 'Login: testtest23.IP:127.0.0.1:57423', '2018-06-13 17:42:21', '2018-06-13 17:42:21'),
	(429, 205, 1, 'Login: testtest23.IP:127.0.0.1:57549', '2018-06-13 17:43:37', '2018-06-13 17:43:37'),
	(430, 205, 1, 'Login: testtest23.IP:127.0.0.1:57608', '2018-06-13 17:44:08', '2018-06-13 17:44:08'),
	(431, 205, 1, 'Login: testtest23.IP:127.0.0.1:57689', '2018-06-13 17:45:02', '2018-06-13 17:45:02'),
	(432, 205, 1, 'Login: testtest23.IP:127.0.0.1:58417', '2018-06-13 17:52:35', '2018-06-13 17:52:35'),
	(433, 205, 1, 'Login: testtest23.IP:127.0.0.1:59461', '2018-06-13 18:03:09', '2018-06-13 18:03:09'),
	(434, 205, 1, 'Login: testtest23.IP:127.0.0.1:64616', '2018-06-14 14:34:39', '2018-06-14 14:34:39'),
	(435, 205, 1, 'Login: testtest23.IP:127.0.0.1:52212', '2018-06-14 15:20:12', '2018-06-14 15:20:12'),
	(436, 205, 1, 'Login: testtest23.IP:127.0.0.1:52208', '2018-06-14 15:23:55', '2018-06-14 15:23:55'),
	(437, 205, 1, 'Login: testtest23.IP:127.0.0.1:52669', '2018-06-14 15:24:59', '2018-06-14 15:24:59'),
	(438, 205, 1, 'Login: testtest23.IP:127.0.0.1:56252', '2018-06-14 16:04:35', '2018-06-14 16:04:35'),
	(439, 205, 1, 'Login: testtest23.IP:127.0.0.1:56254', '2018-06-14 16:05:03', '2018-06-14 16:05:03'),
	(440, 205, 1, 'Login: testtest23.IP:127.0.0.1:56254', '2018-06-14 16:05:45', '2018-06-14 16:05:45'),
	(441, 205, 1, 'Login: testtest23.IP:127.0.0.1:56254', '2018-06-14 16:06:16', '2018-06-14 16:06:16'),
	(442, 205, 1, 'Login: testtest23.IP:127.0.0.1:56249', '2018-06-14 16:07:48', '2018-06-14 16:07:48'),
	(443, 205, 1, 'Login: testtest23.IP:127.0.0.1:56700', '2018-06-14 16:11:51', '2018-06-14 16:11:51'),
	(444, 205, 1, 'Login: testtest23.IP:127.0.0.1:56701', '2018-06-14 16:14:18', '2018-06-14 16:14:18'),
	(445, 205, 1, 'Login: testtest23.IP:127.0.0.1:59315', '2018-06-14 16:37:15', '2018-06-14 16:37:15'),
	(446, 205, 1, 'Login: testtest23.IP:127.0.0.1:59317', '2018-06-14 16:37:18', '2018-06-14 16:37:18'),
	(447, 205, 1, 'Login: testtest23.IP:127.0.0.1:59313', '2018-06-14 16:37:22', '2018-06-14 16:37:22'),
	(448, 205, 1, 'Login: testtest23.IP:127.0.0.1:59316', '2018-06-14 16:37:48', '2018-06-14 16:37:48'),
	(449, 205, 1, 'Login: testtest23.IP:127.0.0.1:59856', '2018-06-14 16:43:18', '2018-06-14 16:43:18'),
	(450, 205, 1, 'Login: testtest23.IP:127.0.0.1:59957', '2018-06-14 16:44:08', '2018-06-14 16:44:08'),
	(451, 205, 1, 'Login: testtest23.IP:127.0.0.1:60123', '2018-06-14 16:45:50', '2018-06-14 16:45:50'),
	(452, 205, 1, 'Login: testtest23.IP:127.0.0.1:60629', '2018-06-14 16:50:40', '2018-06-14 16:50:40'),
	(453, 205, 1, 'Login: testtest23.IP:127.0.0.1:60758', '2018-06-14 16:51:55', '2018-06-14 16:51:55'),
	(454, 205, 1, 'Login: testtest23.IP:127.0.0.1:63355', '2018-06-14 17:21:05', '2018-06-14 17:21:05'),
	(455, 205, 1, 'Login: testtest23.IP:127.0.0.1:53667', '2018-06-15 13:52:52', '2018-06-15 13:52:52'),
	(456, 205, 1, 'Login: testtest23.IP:127.0.0.1:53384', '2018-06-20 09:53:34', '2018-06-20 09:53:34'),
	(457, 205, 1, 'Login: testtest23.IP:127.0.0.1:56092', '2018-06-20 13:41:20', '2018-06-20 13:41:20'),
	(458, 205, 1, 'Login: testtest23.IP:127.0.0.1:54756', '2018-06-20 16:33:07', '2018-06-20 16:33:07'),
	(459, 205, 1, 'Login: testtest23.IP:127.0.0.1:55666', '2018-06-20 16:42:39', '2018-06-20 16:42:39'),
	(460, 205, 1, 'Login: testtest23.IP:127.0.0.1:55778', '2018-06-20 16:43:38', '2018-06-20 16:43:38'),
	(461, 205, 1, 'Login: testtest23.IP:127.0.0.1:56270', '2018-06-20 16:48:26', '2018-06-20 16:48:26'),
	(462, 205, 1, 'Login: testtest23.IP:127.0.0.1:61486', '2018-06-20 17:48:55', '2018-06-20 17:48:55'),
	(463, 205, 1, 'Login: testtest23.IP:127.0.0.1:61925', '2018-06-20 17:53:42', '2018-06-20 17:53:42'),
	(464, 205, 1, 'Login: testtest23.IP:127.0.0.1:65230', '2018-06-20 18:27:38', '2018-06-20 18:27:38'),
	(465, 205, 1, 'Login: testtest23.IP:127.0.0.1:57803', '2018-06-21 09:28:35', '2018-06-21 09:28:35'),
	(466, 205, 1, 'Login: testtest23.IP:127.0.0.1:62201', '2018-06-21 10:20:27', '2018-06-21 10:20:27'),
	(467, 205, 1, 'Login: testtest23.IP:127.0.0.1:62500', '2018-06-21 10:23:51', '2018-06-21 10:23:51'),
	(468, 205, 1, 'Login: testtest23.IP:127.0.0.1:62504', '2018-06-21 10:26:43', '2018-06-21 10:26:43'),
	(469, 205, 1, 'Login: testtest23.IP:127.0.0.1:62504', '2018-06-21 10:28:52', '2018-06-21 10:28:52'),
	(470, 205, 1, 'Login: testtest23.IP:127.0.0.1:62503', '2018-06-21 10:30:46', '2018-06-21 10:30:46'),
	(471, 205, 1, 'Login: testtest23.IP:127.0.0.1:62505', '2018-06-21 10:31:35', '2018-06-21 10:31:35'),
	(472, 205, 1, 'Login: testtest23.IP:127.0.0.1:63268', '2018-06-21 10:32:27', '2018-06-21 10:32:27'),
	(473, 205, 1, 'Login: testtest23.IP:127.0.0.1:63360', '2018-06-21 10:33:25', '2018-06-21 10:33:25'),
	(474, 205, 1, 'Login: testtest23.IP:127.0.0.1:63460', '2018-06-21 10:34:23', '2018-06-21 10:34:23'),
	(475, 205, 1, 'Login: testtest23.IP:127.0.0.1:64081', '2018-06-21 10:41:18', '2018-06-21 10:41:18'),
	(476, 205, 1, 'Login: testtest23.IP:127.0.0.1:64232', '2018-06-21 10:42:43', '2018-06-21 10:42:43'),
	(477, 205, 1, 'Login: testtest23.IP:127.0.0.1:64341', '2018-06-21 10:43:39', '2018-06-21 10:43:39'),
	(478, 205, 1, 'Login: testtest23.IP:127.0.0.1:64510', '2018-06-21 10:45:25', '2018-06-21 10:45:25'),
	(479, 205, 1, 'Login: testtest23.IP:127.0.0.1:64664', '2018-06-21 10:46:58', '2018-06-21 10:46:58'),
	(480, 205, 1, 'Login: testtest23.IP:127.0.0.1:50806', '2018-06-21 17:25:23', '2018-06-21 17:25:23'),
	(481, 205, 1, 'Login: testtest23.IP:127.0.0.1:51058', '2018-06-21 17:27:24', '2018-06-21 17:27:24'),
	(482, 205, 1, 'Login: testtest23.IP:127.0.0.1:51623', '2018-06-21 17:33:29', '2018-06-21 17:33:29'),
	(483, 205, 1, 'Login: testtest23.IP:127.0.0.1:51996', '2018-06-21 17:36:58', '2018-06-21 17:36:58'),
	(484, 205, 1, 'Login: testtest23.IP:127.0.0.1:55537', '2018-06-21 17:39:58', '2018-06-21 17:39:58'),
	(485, 205, 1, 'Login: testtest23.IP:127.0.0.1:59713', '2018-06-21 17:41:33', '2018-06-21 17:41:33'),
	(486, 205, 1, 'Login: testtest23.IP:127.0.0.1:60072', '2018-06-21 17:45:08', '2018-06-21 17:45:08'),
	(487, 205, 1, 'Login: testtest23.IP:127.0.0.1:51042', '2018-06-21 17:53:56', '2018-06-21 17:53:56'),
	(488, 205, 1, 'Login: testtest23.IP:127.0.0.1:51942', '2018-06-21 18:04:05', '2018-06-21 18:04:05'),
	(489, 205, 1, 'Login: testtest23.IP:127.0.0.1:52281', '2018-06-21 18:06:52', '2018-06-21 18:06:52'),
	(490, NULL, 1, 'Try login not exist account: testtest23.IP: 127.0.0.1:53259', '2018-06-21 18:17:06', '2018-06-21 18:17:06'),
	(491, NULL, 1, 'Try login not exist account: testtest23.IP: 127.0.0.1:53262', '2018-06-21 18:17:30', '2018-06-21 18:17:30'),
	(492, 2, 1, 'Login: testtest1.IP:127.0.0.1:53366', '2018-06-21 18:17:43', '2018-06-21 18:17:43'),
	(493, 2, 1, 'Login failed: testtest1.IP:127.0.0.1:53833', '2018-06-21 18:22:21', '2018-06-21 18:22:21'),
	(494, 2, 1, 'Login: testtest1.IP:127.0.0.1:53836', '2018-06-21 18:22:26', '2018-06-21 18:22:26'),
	(495, 2, 1, 'Login: testtest1.IP:127.0.0.1:54110', '2018-06-21 18:24:38', '2018-06-21 18:24:38'),
	(496, 2, 1, 'Login: testtest1.IP:127.0.0.1:54116', '2018-06-21 18:25:32', '2018-06-21 18:25:32'),
	(497, NULL, 1, 'Try login not exist account: testtest23.IP: 127.0.0.1:60408', '2018-06-21 18:31:12', '2018-06-21 18:31:12'),
	(498, NULL, 1, 'Try login not exist account: testtest23.IP: 127.0.0.1:60433', '2018-06-21 18:31:21', '2018-06-21 18:31:21'),
	(499, 2, 1, 'Login: testtest1.IP:127.0.0.1:60445', '2018-06-21 18:31:24', '2018-06-21 18:31:24'),
	(500, 2, 1, 'Login: testtest1.IP:127.0.0.1:63031', '2018-06-21 18:32:38', '2018-06-21 18:32:38'),
	(501, 2, 1, 'Login: testtest1.IP:127.0.0.1:51947', '2018-06-21 18:34:35', '2018-06-21 18:34:35'),
	(502, 2, 1, 'Login: testtest1.IP:127.0.0.1:54654', '2018-06-21 18:38:05', '2018-06-21 18:38:05'),
	(503, 2, 1, 'Login: testtest1.IP:127.0.0.1:55276', '2018-06-21 18:44:43', '2018-06-21 18:44:43'),
	(504, 2, 1, 'Login: testtest1.IP:127.0.0.1:55565', '2018-06-21 18:47:35', '2018-06-21 18:47:35'),
	(505, 2, 1, 'Login: testtest1.IP:127.0.0.1:55779', '2018-06-21 18:49:46', '2018-06-21 18:49:46'),
	(506, 2, 1, 'Login: testtest1.IP:127.0.0.1:56247', '2018-06-21 18:55:12', '2018-06-21 18:55:12'),
	(507, 2, 1, 'Login: testtest1.IP:127.0.0.1:56818', '2018-06-21 19:01:57', '2018-06-21 19:01:57'),
	(508, 2, 1, 'Login: testtest1.IP:127.0.0.1:56994', '2018-06-21 19:03:50', '2018-06-21 19:03:50'),
	(509, 2, 1, 'Login: testtest1.IP:127.0.0.1:57352', '2018-06-21 19:07:25', '2018-06-21 19:07:25'),
	(510, 2, 1, 'Login: testtest1.IP:127.0.0.1:57499', '2018-06-21 19:08:53', '2018-06-21 19:08:53'),
	(511, 2, 1, 'Login: testtest1.IP:127.0.0.1:57660', '2018-06-21 19:10:20', '2018-06-21 19:10:20'),
	(512, 2, 1, 'Login: testtest1.IP:127.0.0.1:64158', '2018-06-22 09:16:31', '2018-06-22 09:16:31'),
	(513, 2, 1, 'Login: testtest1.IP:127.0.0.1:64228', '2018-06-22 09:31:07', '2018-06-22 09:31:07'),
	(514, 2, 1, 'Login: testtest1.IP:127.0.0.1:64268', '2018-06-22 09:45:01', '2018-06-22 09:45:01'),
	(515, 2, 1, 'Login: testtest1.IP:127.0.0.1:64319', '2018-06-22 09:52:58', '2018-06-22 09:52:58'),
	(516, 2, 1, 'Login: testtest1.IP:127.0.0.1:64678', '2018-06-22 11:41:48', '2018-06-22 11:41:48'),
	(517, 2, 1, 'Login: testtest1.IP:127.0.0.1:64712', '2018-06-22 11:44:41', '2018-06-22 11:44:41'),
	(518, 2, 1, 'Login: testtest1.IP:127.0.0.1:64753', '2018-06-22 11:52:03', '2018-06-22 11:52:03'),
	(519, 2, 1, 'Login: testtest1.IP:127.0.0.1:63280', '2018-06-26 09:47:11', '2018-06-26 09:47:11'),
	(520, 2, 1, 'Login: testtest1.IP:127.0.0.1:63284', '2018-06-26 09:47:44', '2018-06-26 09:47:44'),
	(521, 2, 1, 'Login: testtest1.IP:127.0.0.1:63280', '2018-06-26 09:51:47', '2018-06-26 09:51:47'),
	(522, 2, 1, 'Login: testtest1.IP:127.0.0.1:55450', '2018-06-27 10:21:44', '2018-06-27 10:21:44'),
	(523, 2, 1, 'Login: testtest1.IP:127.0.0.1:55447', '2018-06-27 10:23:00', '2018-06-27 10:23:00'),
	(524, 2, 1, 'Login: testtest1.IP:127.0.0.1:61046', '2018-06-27 11:25:49', '2018-06-27 11:25:49'),
	(525, 2, 1, 'Login: testtest1.IP:127.0.0.1:61046', '2018-06-27 11:25:54', '2018-06-27 11:25:54'),
	(526, 2, 1, 'Login: testtest1.IP:127.0.0.1:61063', '2018-06-27 11:26:26', '2018-06-27 11:26:26'),
	(527, 2, 1, 'Login: testtest1.IP:127.0.0.1:61319', '2018-06-27 11:28:24', '2018-06-27 11:28:24'),
	(528, 2, 1, 'Login: testtest1.IP:127.0.0.1:61376', '2018-06-27 11:28:41', '2018-06-27 11:28:41'),
	(529, 2, 1, 'Login: testtest1.IP:127.0.0.1:61557', '2018-06-27 11:30:31', '2018-06-27 11:30:31'),
	(530, 2, 1, 'Login: testtest1.IP:127.0.0.1:61744', '2018-06-27 11:32:23', '2018-06-27 11:32:23'),
	(531, 2, 1, 'Login: testtest1.IP:127.0.0.1:62152', '2018-06-27 11:36:49', '2018-06-27 11:36:49'),
	(532, 2, 1, 'Login: testtest1.IP:127.0.0.1:62397', '2018-06-27 11:39:21', '2018-06-27 11:39:21'),
	(533, 2, 1, 'Login: testtest1.IP:127.0.0.1:57613', '2018-06-27 14:00:07', '2018-06-27 14:00:07'),
	(534, 2, 1, 'Login: testtest1.IP:127.0.0.1:58231', '2018-06-27 14:06:15', '2018-06-27 14:06:15'),
	(535, 2, 1, 'Login: testtest1.IP:127.0.0.1:54666', '2018-06-27 16:37:50', '2018-06-27 16:37:50'),
	(536, 2, 1, 'Login: testtest1.IP:127.0.0.1:59394', '2018-06-27 17:34:54', '2018-06-27 17:34:54'),
	(537, 2, 1, 'Login: testtest1.IP:127.0.0.1:59861', '2018-06-27 17:38:41', '2018-06-27 17:38:41'),
	(538, 2, 1, 'Login: testtest1.IP:127.0.0.1:60132', '2018-06-27 17:41:20', '2018-06-27 17:41:20'),
	(539, 2, 1, 'Login: testtest1.IP:127.0.0.1:60994', '2018-06-27 17:50:10', '2018-06-27 17:50:10'),
	(540, 2, 1, 'Login: testtest1.IP:127.0.0.1:61060', '2018-06-27 17:50:51', '2018-06-27 17:50:51'),
	(541, 2, 1, 'Login: testtest1.IP:127.0.0.1:61335', '2018-06-27 17:53:36', '2018-06-27 17:53:36'),
	(542, 2, 1, 'Login: testtest1.IP:127.0.0.1:61489', '2018-06-27 17:55:06', '2018-06-27 17:55:06'),
	(543, 2, 1, 'Login: testtest1.IP:127.0.0.1:63126', '2018-06-27 18:13:39', '2018-06-27 18:13:39'),
	(544, 2, 1, 'Login: testtest1.IP:127.0.0.1:63672', '2018-06-27 18:19:18', '2018-06-27 18:19:18'),
	(545, 2, 1, 'Login: testtest1.IP:127.0.0.1:63724', '2018-06-27 18:19:48', '2018-06-27 18:19:48'),
	(546, 2, 1, 'Login: testtest1.IP:127.0.0.1:64828', '2018-06-27 18:31:06', '2018-06-27 18:31:06'),
	(547, 2, 1, 'Login: testtest1.IP:127.0.0.1:54563', '2018-06-28 11:40:31', '2018-06-28 11:40:31'),
	(548, 2, 1, 'Login: testtest1.IP:127.0.0.1:49531', '2018-06-28 13:57:14', '2018-06-28 13:57:14'),
	(549, 2, 1, 'Login: testtest1.IP:127.0.0.1:52144', '2018-06-29 14:40:50', '2018-06-29 14:40:50'),
	(550, 2, 1, 'Login: testtest1.IP:127.0.0.1:52364', '2018-06-29 15:25:12', '2018-06-29 15:25:12'),
	(551, 2, 1, 'Login: testtest1.IP:127.0.0.1:52545', '2018-06-29 16:38:47', '2018-06-29 16:38:47'),
	(552, 2, 1, 'Login: testtest1.IP:127.0.0.1:52575', '2018-06-29 16:45:25', '2018-06-29 16:45:25'),
	(553, 2, 1, 'Login: testtest1.IP:127.0.0.1:52943', '2018-06-29 17:18:34', '2018-06-29 17:18:34'),
	(554, 2, 1, 'Login: testtest1.IP:127.0.0.1:49889', '2018-06-29 17:51:59', '2018-06-29 17:51:59'),
	(555, 2, 1, 'Login: testtest1.IP:127.0.0.1:49918', '2018-06-29 17:53:51', '2018-06-29 17:53:51'),
	(556, 2, 1, 'Login: testtest1.IP:127.0.0.1:51848', '2018-06-30 13:25:00', '2018-06-30 13:25:00'),
	(557, 2, 1, 'Login: testtest1.IP:127.0.0.1:55886', '2018-07-02 15:12:40', '2018-07-02 15:12:40'),
	(558, 2, 1, 'Login: testtest1.IP:127.0.0.1:60595', '2018-07-02 16:14:26', '2018-07-02 16:14:26'),
	(559, 2, 1, 'Login: testtest1.IP:127.0.0.1:60787', '2018-07-02 16:16:30', '2018-07-02 16:16:30'),
	(560, 2, 1, 'Login: testtest1.IP:127.0.0.1:60787', '2018-07-02 16:16:32', '2018-07-02 16:16:32'),
	(561, 2, 1, 'Login: testtest1.IP:127.0.0.1:60786', '2018-07-02 16:17:06', '2018-07-02 16:17:06'),
	(562, 2, 1, 'Login: testtest1.IP:127.0.0.1:64957', '2018-07-02 17:06:53', '2018-07-02 17:06:53'),
	(563, 2, 1, 'Login: testtest1.IP:127.0.0.1:65307', '2018-07-02 17:10:40', '2018-07-02 17:10:40'),
	(564, 2, 1, 'Login: testtest1.IP:127.0.0.1:65308', '2018-07-02 17:11:00', '2018-07-02 17:11:00'),
	(565, 2, 1, 'Login: testtest1.IP:127.0.0.1:65307', '2018-07-02 17:11:51', '2018-07-02 17:11:51'),
	(566, 2, 1, 'Login: testtest1.IP:127.0.0.1:65503', '2018-07-02 17:12:56', '2018-07-02 17:12:56'),
	(567, 2, 1, 'Login: testtest1.IP:127.0.0.1:65503', '2018-07-02 17:14:04', '2018-07-02 17:14:04'),
	(568, 2, 1, 'Login: testtest1.IP:127.0.0.1:49251', '2018-07-02 17:14:21', '2018-07-02 17:14:21'),
	(569, 2, 1, 'Login: testtest1.IP:127.0.0.1:49380', '2018-07-02 17:15:41', '2018-07-02 17:15:41'),
	(570, 2, 1, 'Login: testtest1.IP:127.0.0.1:49432', '2018-07-02 17:16:10', '2018-07-02 17:16:10'),
	(571, 2, 1, 'Login: testtest1.IP:127.0.0.1:49685', '2018-07-02 17:18:58', '2018-07-02 17:18:58'),
	(572, 2, 1, 'Login: testtest1.IP:127.0.0.1:50143', '2018-07-02 17:24:11', '2018-07-02 17:24:11'),
	(573, 2, 1, 'Login: testtest1.IP:127.0.0.1:50569', '2018-07-02 17:28:54', '2018-07-02 17:28:54'),
	(574, 2, 1, 'Login: testtest1.IP:127.0.0.1:50858', '2018-07-02 17:31:57', '2018-07-02 17:31:57'),
	(575, 2, 1, 'Login: testtest1.IP:127.0.0.1:54108', '2018-07-02 18:10:42', '2018-07-02 18:10:42'),
	(576, 2, 1, 'Login: testtest1.IP:127.0.0.1:54266', '2018-07-02 18:12:26', '2018-07-02 18:12:26'),
	(577, 2, 1, 'Login: testtest1.IP:127.0.0.1:54338', '2018-07-02 18:13:09', '2018-07-02 18:13:09'),
	(578, 2, 1, 'Login: testtest1.IP:127.0.0.1:55040', '2018-07-02 18:21:19', '2018-07-02 18:21:19'),
	(579, 2, 1, 'Login: testtest1.IP:127.0.0.1:55111', '2018-07-02 18:21:59', '2018-07-02 18:21:59'),
	(580, 2, 1, 'Login: testtest1.IP:127.0.0.1:56920', '2018-07-02 18:42:29', '2018-07-02 18:42:29'),
	(581, 2, 1, 'Login: testtest1.IP:127.0.0.1:52893', '2018-07-03 10:27:38', '2018-07-03 10:27:38'),
	(582, 2, 1, 'Login: testtest1.IP:127.0.0.1:55498', '2018-07-03 10:58:07', '2018-07-03 10:58:07'),
	(583, 2, 1, 'Login: testtest1.IP:127.0.0.1:55939', '2018-07-03 11:03:15', '2018-07-03 11:03:15'),
	(584, 2, 1, 'Login: testtest1.IP:127.0.0.1:56724', '2018-07-03 11:12:41', '2018-07-03 11:12:41'),
	(585, 2, 1, 'Login: testtest1.IP:127.0.0.1:56882', '2018-07-03 11:14:27', '2018-07-03 11:14:27'),
	(586, 2, 1, 'Login: testtest1.IP:127.0.0.1:57035', '2018-07-03 11:16:00', '2018-07-03 11:16:00'),
	(587, 2, 1, 'Login: testtest1.IP:127.0.0.1:57196', '2018-07-03 11:17:41', '2018-07-03 11:17:41'),
	(588, 2, 1, 'Login: testtest1.IP:127.0.0.1:57932', '2018-07-03 11:26:26', '2018-07-03 11:26:26'),
	(589, 2, 1, 'Login: testtest1.IP:127.0.0.1:58167', '2018-07-03 11:29:08', '2018-07-03 11:29:08'),
	(590, 2, 1, 'Login: testtest1.IP:127.0.0.1:58757', '2018-07-03 11:36:09', '2018-07-03 11:36:09'),
	(591, 2, 1, 'Login: testtest1.IP:127.0.0.1:59873', '2018-07-03 11:49:29', '2018-07-03 11:49:29'),
	(592, 2, 1, 'Login: testtest1.IP:127.0.0.1:59990', '2018-07-03 11:50:45', '2018-07-03 11:50:45'),
	(593, 2, 1, 'Login: testtest1.IP:127.0.0.1:60094', '2018-07-03 11:51:51', '2018-07-03 11:51:51'),
	(594, 2, 1, 'Login: testtest1.IP:127.0.0.1:60451', '2018-07-03 11:56:02', '2018-07-03 11:56:02'),
	(595, 2, 1, 'Login: testtest1.IP:127.0.0.1:57581', '2018-07-03 14:40:36', '2018-07-03 14:40:36'),
	(596, 2, 1, 'Login: testtest1.IP:127.0.0.1:60786', '2018-07-03 15:23:40', '2018-07-03 15:23:40'),
	(597, 2, 1, 'Login: testtest1.IP:127.0.0.1:60786', '2018-07-03 15:24:22', '2018-07-03 15:24:22'),
	(598, 2, 1, 'Login: testtest1.IP:127.0.0.1:61411', '2018-07-03 15:24:49', '2018-07-03 15:24:49'),
	(599, 2, 1, 'Login: testtest1.IP:127.0.0.1:62735', '2018-07-03 15:39:32', '2018-07-03 15:39:32'),
	(600, 2, 1, 'Login: testtest1.IP:127.0.0.1:62785', '2018-07-03 15:39:59', '2018-07-03 15:39:59'),
	(601, 2, 1, 'Login: testtest1.IP:127.0.0.1:49719', '2018-07-03 16:17:38', '2018-07-03 16:17:38'),
	(602, 2, 1, 'Login: testtest1.IP:127.0.0.1:49919', '2018-07-03 16:19:38', '2018-07-03 16:19:38'),
	(603, 2, 1, 'Login: testtest1.IP:127.0.0.1:50858', '2018-07-03 16:30:30', '2018-07-03 16:30:30'),
	(604, 2, 1, 'Login: testtest1.IP:127.0.0.1:52083', '2018-07-03 16:44:19', '2018-07-03 16:44:19'),
	(605, 2, 1, 'Login: testtest1.IP:127.0.0.1:52169', '2018-07-03 16:45:12', '2018-07-03 16:45:12'),
	(606, 2, 1, 'Login: testtest1.IP:127.0.0.1:52172', '2018-07-03 16:50:31', '2018-07-03 16:50:31'),
	(607, 2, 1, 'Login: testtest1.IP:127.0.0.1:52171', '2018-07-03 16:50:39', '2018-07-03 16:50:39'),
	(608, 2, 1, 'Login: testtest1.IP:127.0.0.1:54530', '2018-07-03 17:11:22', '2018-07-03 17:11:22'),
	(609, 2, 1, 'Login: testtest1.IP:127.0.0.1:54602', '2018-07-03 17:12:03', '2018-07-03 17:12:03'),
	(610, 2, 1, 'Login: testtest1.IP:127.0.0.1:55006', '2018-07-03 17:16:28', '2018-07-03 17:16:28'),
	(611, 635, 2, 'Set deactive by user 2', '2018-07-03 17:30:39', '2018-07-03 17:30:39'),
	(612, 635, 2, 'Set active by user 2', '2018-07-03 17:30:40', '2018-07-03 17:30:40'),
	(613, 2, 1, 'Login: testtest1.IP:127.0.0.1:56796', '2018-07-03 17:36:50', '2018-07-03 17:36:50'),
	(614, 2, 1, 'Login: testtest1.IP:127.0.0.1:56806', '2018-07-03 17:38:02', '2018-07-03 17:38:02'),
	(615, 2, 1, 'Login: testtest1.IP:127.0.0.1:57022', '2018-07-03 17:39:02', '2018-07-03 17:39:02'),
	(616, 2, 1, 'Login: testtest1.IP:127.0.0.1:57226', '2018-07-03 17:41:03', '2018-07-03 17:41:03'),
	(617, 2, 1, 'Login: testtest1.IP:127.0.0.1:58036', '2018-07-03 17:49:29', '2018-07-03 17:49:29'),
	(618, 2, 1, 'Login: testtest1.IP:127.0.0.1:58495', '2018-07-03 17:54:23', '2018-07-03 17:54:23'),
	(619, 2, 1, 'Login: testtest1.IP:127.0.0.1:58616', '2018-07-03 17:55:24', '2018-07-03 17:55:24'),
	(620, 2, 1, 'Login: testtest1.IP:127.0.0.1:58616', '2018-07-03 17:55:56', '2018-07-03 17:55:56'),
	(621, 2, 1, 'Login: testtest1.IP:127.0.0.1:58617', '2018-07-03 17:56:24', '2018-07-03 17:56:24'),
	(622, 2, 1, 'Login: testtest1.IP:127.0.0.1:58614', '2018-07-03 17:57:04', '2018-07-03 17:57:04'),
	(623, 2, 1, 'Login: testtest1.IP:127.0.0.1:58906', '2018-07-03 17:58:48', '2018-07-03 17:58:48'),
	(624, 2, 1, 'Login: testtest1.IP:127.0.0.1:58914', '2018-07-03 17:59:54', '2018-07-03 17:59:54'),
	(625, 2, 1, 'Login: testtest1.IP:127.0.0.1:59054', '2018-07-03 18:00:08', '2018-07-03 18:00:08'),
	(626, 2, 1, 'Login: testtest1.IP:127.0.0.1:59055', '2018-07-03 18:00:28', '2018-07-03 18:00:28'),
	(627, 2, 1, 'Login: testtest1.IP:127.0.0.1:59047', '2018-07-03 18:03:13', '2018-07-03 18:03:13'),
	(628, 2, 1, 'Login: testtest1.IP:127.0.0.1:59501', '2018-07-03 18:04:55', '2018-07-03 18:04:55'),
	(629, 2, 1, 'Login: testtest1.IP:127.0.0.1:59501', '2018-07-03 18:08:24', '2018-07-03 18:08:24'),
	(630, 2, 1, 'Login: testtest1.IP:127.0.0.1:62302', '2018-07-03 18:37:55', '2018-07-03 18:37:55'),
	(631, 2, 1, 'Login: testtest1.IP:127.0.0.1:57500', '2018-07-04 10:18:00', '2018-07-04 10:18:00'),
	(632, 2, 1, 'Login: testtest1.IP:127.0.0.1:58252', '2018-07-04 10:24:56', '2018-07-04 10:24:56'),
	(633, 2, 1, 'Login: testtest1.IP:127.0.0.1:61930', '2018-07-04 11:08:43', '2018-07-04 11:08:43'),
	(634, 2, 1, 'Login: testtest1.IP:127.0.0.1:63048', '2018-07-04 11:21:32', '2018-07-04 11:21:32'),
	(635, 2, 1, 'Login: testtest1.IP:127.0.0.1:62365', '2018-07-04 14:30:47', '2018-07-04 14:30:47'),
	(636, 2, 1, 'Login: testtest1.IP:127.0.0.1:63624', '2018-07-04 14:45:40', '2018-07-04 14:45:40'),
	(637, 2, 1, 'Login: testtest1.IP:127.0.0.1:51563', '2018-07-04 15:34:59', '2018-07-04 15:34:59'),
	(638, 2, 1, 'Login: testtest1.IP:127.0.0.1:54253', '2018-07-04 16:06:28', '2018-07-04 16:06:28'),
	(639, 2, 1, 'Login: testtest1.IP:127.0.0.1:54254', '2018-07-04 16:07:02', '2018-07-04 16:07:02'),
	(640, 2, 1, 'Login: testtest1.IP:127.0.0.1:54250', '2018-07-04 16:07:37', '2018-07-04 16:07:37'),
	(641, 2, 1, 'Login: testtest1.IP:127.0.0.1:54253', '2018-07-04 16:08:04', '2018-07-04 16:08:04'),
	(642, 2, 1, 'Login: testtest1.IP:127.0.0.1:54251', '2018-07-04 16:08:27', '2018-07-04 16:08:27'),
	(643, 2, 1, 'Login: testtest1.IP:127.0.0.1:54253', '2018-07-04 16:08:32', '2018-07-04 16:08:32'),
	(644, 2, 1, 'Login: testtest1.IP:127.0.0.1:54253', '2018-07-04 16:12:53', '2018-07-04 16:12:53'),
	(645, 2, 1, 'Login: testtest1.IP:127.0.0.1:55466', '2018-07-04 16:22:25', '2018-07-04 16:22:25'),
	(646, 2, 1, 'Login: testtest1.IP:127.0.0.1:55468', '2018-07-04 16:24:43', '2018-07-04 16:24:43'),
	(647, 2, 1, 'Login: testtest1.IP:127.0.0.1:55463', '2018-07-04 16:24:52', '2018-07-04 16:24:52'),
	(648, 2, 1, 'Login: testtest1.IP:127.0.0.1:55468', '2018-07-04 16:25:06', '2018-07-04 16:25:06'),
	(649, 2, 1, 'Login: testtest1.IP:127.0.0.1:55464', '2018-07-04 16:27:41', '2018-07-04 16:27:41'),
	(650, 2, 1, 'Login: testtest1.IP:127.0.0.1:60767', '2018-07-04 17:17:01', '2018-07-04 17:17:01'),
	(651, 2, 1, 'Login: testtest1.IP:127.0.0.1:61441', '2018-07-05 16:19:20', '2018-07-05 16:19:20'),
	(652, 2, 1, 'Login: testtest1.IP:127.0.0.1:61591', '2018-07-05 16:21:04', '2018-07-05 16:21:04'),
	(653, 2, 1, 'Login: testtest1.IP:127.0.0.1:55237', '2018-07-05 18:15:44', '2018-07-05 18:15:44'),
	(654, 2, 1, 'Login: testtest1.IP:127.0.0.1:60040', '2018-07-06 11:49:30', '2018-07-06 11:49:30'),
	(655, 2, 1, 'Login: testtest1.IP:127.0.0.1:51167', '2018-07-06 16:21:51', '2018-07-06 16:21:51'),
	(656, 2, 1, 'Login: testtest1.IP:127.0.0.1:57897', '2018-07-09 09:40:39', '2018-07-09 09:40:39'),
	(657, 2, 1, 'Login: testtest1.IP:127.0.0.1:60654', '2018-07-09 13:57:06', '2018-07-09 13:57:06'),
	(658, 2, 1, 'Login: testtest1.IP:127.0.0.1:56435', '2018-07-09 16:12:12', '2018-07-09 16:12:12'),
	(659, 2, 1, 'Login: testtest1.IP:127.0.0.1:64458', '2018-07-09 17:44:12', '2018-07-09 17:44:12'),
	(660, 2, 1, 'Login: testtest1.IP:127.0.0.1:58846', '2018-07-10 09:14:53', '2018-07-10 09:14:53'),
	(661, 2, 1, 'Login: testtest1.IP:127.0.0.1:50590', '2018-07-10 13:50:59', '2018-07-10 13:50:59'),
	(662, 2, 1, 'Login: testtest1.IP:127.0.0.1:61044', '2018-07-10 15:46:47', '2018-07-10 15:46:47'),
	(663, 2, 1, 'Login: testtest1.IP:127.0.0.1:61197', '2018-07-10 15:48:17', '2018-07-10 15:48:17'),
	(664, 2, 1, 'Login: testtest1.IP:127.0.0.1:50116', '2018-07-13 11:11:16', '2018-07-13 11:11:16'),
	(665, NULL, 1, 'Try login not exist account: rakuten.IP: 127.0.0.1:64442', '2018-07-16 17:18:27', '2018-07-16 17:18:27'),
	(666, NULL, 1, 'Try login not exist account: testtest1.IP: 127.0.0.1:64442', '2018-07-16 17:18:37', '2018-07-16 17:18:37'),
	(667, NULL, 1, 'Try login not exist account: testtest1.IP: 127.0.0.1:64442', '2018-07-16 17:19:21', '2018-07-16 17:19:21'),
	(668, NULL, 1, 'Try login not exist account: admin.IP: 127.0.0.1:64447', '2018-07-16 17:19:50', '2018-07-16 17:19:50'),
	(669, NULL, 1, 'Try login not exist account: rakuten.IP: 127.0.0.1:64447', '2018-07-16 17:21:43', '2018-07-16 17:21:43'),
	(670, NULL, 1, 'Try login not exist account: rakuten.IP: 127.0.0.1:64446', '2018-07-16 17:21:55', '2018-07-16 17:21:55'),
	(671, NULL, 1, 'Try login not exist account: rakuten.IP: 127.0.0.1:64832', '2018-07-16 17:23:13', '2018-07-16 17:23:13'),
	(672, NULL, 1, 'Try login not exist account: admin.IP: 127.0.0.1:64891', '2018-07-16 17:23:49', '2018-07-16 17:23:49'),
	(673, 2, 1, 'Login: admin.IP:', '2018-07-16 17:27:00', '2018-07-16 17:27:00'),
	(674, 2, 1, 'Login: admin.IP:127.0.0.1:49748', '2018-07-16 17:37:58', '2018-07-16 17:37:58'),
	(675, 2, 1, 'Login: admin.IP:127.0.0.1:49876', '2018-07-16 17:39:10', '2018-07-16 17:39:10'),
	(676, 2, 1, 'Login: admin.IP:127.0.0.1:49880', '2018-07-16 17:42:17', '2018-07-16 17:42:17'),
	(677, 2, 1, 'Login: admin.IP:127.0.0.1:51110', '2018-07-16 17:53:59', '2018-07-16 17:53:59'),
	(678, 2, 1, 'Login: admin.IP:127.0.0.1:60684', '2018-07-25 11:28:19', '2018-07-25 11:28:19'),
	(679, 2, 1, 'Login: admin.IP:127.0.0.1:60307', '2018-07-25 14:28:32', '2018-07-25 14:28:32'),
	(680, 2, 1, 'Login: admin.IP:127.0.0.1:62396', '2018-07-25 14:51:10', '2018-07-25 14:51:10'),
	(681, 2, 1, 'Login: admin.IP:127.0.0.1:62168', '2018-07-25 17:57:24', '2018-07-25 17:57:24'),
	(682, 2, 1, 'Login: admin.IP:127.0.0.1:50264', '2018-07-26 11:14:54', '2018-07-26 11:14:54'),
	(683, 2, 1, 'Login: admin.IP:127.0.0.1:53689', '2018-07-26 11:52:14', '2018-07-26 11:52:14'),
	(684, 2, 1, 'Login: admin.IP:127.0.0.1:53502', '2018-07-26 18:15:07', '2018-07-26 18:15:07'),
	(685, 2, 1, 'Login: admin.IP:127.0.0.1:53730', '2018-07-26 18:15:22', '2018-07-26 18:15:22'),
	(686, 2, 1, 'Login: admin.IP:127.0.0.1:49205', '2018-07-27 09:48:59', '2018-07-27 09:48:59'),
	(687, 2, 1, 'Login: admin.IP:127.0.0.1:62441', '2018-07-27 15:27:29', '2018-07-27 15:27:29'),
	(688, 2, 1, 'Login: admin.IP:127.0.0.1:57475', '2018-07-27 17:40:31', '2018-07-27 17:40:31'),
	(689, 2, 1, 'Login: admin.IP:127.0.0.1:59809', '2018-07-27 18:06:26', '2018-07-27 18:06:26'),
	(690, 2, 1, 'Login: admin.IP:127.0.0.1:59984', '2018-07-27 18:08:20', '2018-07-27 18:08:20'),
	(691, 2, 1, 'Login: admin.IP:127.0.0.1:60402', '2018-07-27 18:12:56', '2018-07-27 18:12:56'),
	(692, 2, 1, 'Login: admin.IP:127.0.0.1:62380', '2018-07-27 18:35:14', '2018-07-27 18:35:14'),
	(693, 2, 1, 'Login: admin.IP:127.0.0.1:62522', '2018-07-27 18:36:33', '2018-07-27 18:36:33'),
	(694, 2, 1, 'Login: admin.IP:127.0.0.1:62622', '2018-07-27 18:37:34', '2018-07-27 18:37:34'),
	(695, 2, 1, 'Login: admin.IP:127.0.0.1:57833', '2018-07-30 11:04:38', '2018-07-30 11:04:38'),
	(696, 2, 1, 'Login: admin.IP:127.0.0.1:60365', '2018-07-30 11:34:58', '2018-07-30 11:34:58'),
	(697, 2, 1, 'Login: admin.IP:127.0.0.1:60468', '2018-07-30 11:36:09', '2018-07-30 11:36:09'),
	(698, NULL, 1, 'Try login not exist account: ChangeSelfPassword.IP: 127.0.0.1:60634', '2018-07-30 11:37:41', '2018-07-30 11:37:41'),
	(699, 2, 1, 'Login: admin.IP:127.0.0.1:60633', '2018-07-30 11:37:46', '2018-07-30 11:37:46'),
	(700, 2, 1, 'Login: admin.IP:127.0.0.1:49988', '2018-07-30 17:02:28', '2018-07-30 17:02:28'),
	(701, 2, 1, 'Login: admin.IP:127.0.0.1:50020', '2018-07-30 17:03:52', '2018-07-30 17:03:52'),
	(702, 2, 1, 'Login: admin.IP:127.0.0.1:54880', '2018-08-02 10:42:42', '2018-08-02 10:42:42'),
	(703, 2, 1, 'Login: admin.IP:127.0.0.1:56753', '2018-08-02 11:20:36', '2018-08-02 11:20:36'),
	(704, 2, 1, 'Login: admin.IP:127.0.0.1:58942', '2018-08-02 11:46:45', '2018-08-02 11:46:45'),
	(705, 2, 1, 'Login: admin.IP:127.0.0.1:61966', '2018-08-02 15:30:16', '2018-08-02 15:30:16'),
	(706, 2, 1, 'Login: admin.IP:127.0.0.1:62289', '2018-08-02 15:33:46', '2018-08-02 15:33:46'),
	(707, 2, 1, 'Login: admin.IP:127.0.0.1:61366', '2018-08-03 11:17:32', '2018-08-03 11:17:32'),
	(708, 2, 1, 'Login: admin.IP:127.0.0.1:56764', '2018-08-06 11:31:18', '2018-08-06 11:31:18'),
	(709, 2, 1, 'Login: admin.IP:127.0.0.1:50059', '2018-08-06 16:34:00', '2018-08-06 16:34:00'),
	(710, 2, 1, 'Login: admin.IP:127.0.0.1:50201', '2018-08-06 16:35:14', '2018-08-06 16:35:14'),
	(711, 2, 1, 'Login: admin.IP:127.0.0.1:50269', '2018-08-06 16:35:46', '2018-08-06 16:35:46'),
	(712, 2, 1, 'Login: admin.IP:127.0.0.1:60890', '2018-08-07 11:11:50', '2018-08-07 11:11:50'),
	(713, 2, 1, 'Login: admin.IP:127.0.0.1:58979', '2018-08-07 16:59:22', '2018-08-07 16:59:22'),
	(714, 2, 1, 'Login: admin.IP:127.0.0.1:59101', '2018-08-10 17:47:20', '2018-08-10 17:47:20'),
	(715, 2, 1, 'Login: admin.IP:127.0.0.1:59667', '2018-08-10 17:53:25', '2018-08-10 17:53:25'),
	(716, 2, 1, 'Login: admin.IP:127.0.0.1:59940', '2018-08-10 17:56:27', '2018-08-10 17:56:27'),
	(717, 2, 1, 'Login: admin.IP:127.0.0.1:60174', '2018-08-10 17:58:58', '2018-08-10 17:58:58'),
	(718, 2, 1, 'Login: admin.IP:127.0.0.1:60467', '2018-08-10 18:02:03', '2018-08-10 18:02:03');
/*!40000 ALTER TABLE `log_user_change` ENABLE KEYS */;

-- 傾印  表格 pcb.machines 結構
CREATE TABLE IF NOT EXISTS `machines` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `store_name` varchar(120) DEFAULT '',
  `machine_name` varchar(120) DEFAULT '',
  `pcb_id` int(10) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `delete_flag` bit(1) NOT NULL DEFAULT b'0',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `pcb_id` (`pcb_id`),
  KEY `FK_machines_users` (`user_id`),
  KEY `store_name` (`store_name`),
  CONSTRAINT `FK_machines_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8 COMMENT='機器實體';

-- 正在傾印表格  pcb.machines 的資料：~50 rows (大約)
DELETE FROM `machines`;
/*!40000 ALTER TABLE `machines` DISABLE KEYS */;
INSERT INTO `machines` (`id`, `store_name`, `machine_name`, `pcb_id`, `user_id`, `delete_flag`, `created_time`, `update_time`) VALUES
	(1, 'dancer', '', 672992539, 11, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(2, 'boa', '', 194700123, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(3, 'dragon', '', 583324436, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(4, 'reaper', '', 269017419, 7, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(5, 'raptor', '', 598825946, 4, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(6, 'sargent', '', 173634315, 11, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(7, 'princess', '', 625067202, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(8, 'nose', '', 836711269, 7, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(9, 'arm', '', 711735704, 14, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(10, 'gambler', '', 287296166, 11, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(11, 'whimsey', '', 871708128, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(12, 'wolf', '', 323247432, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(13, 'gem', '', 910426838, 4, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(14, 'jester', '', 725822546, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(15, 'bison', '', 463747547, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(16, 'friend', '', 905686586, 14, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(17, 'mole', '', 753802780, 14, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(18, 'paw', '', 758586852, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(19, 'tracker', '', 673612843, 4, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(20, 'chanter', '', 390399546, 4, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(21, 'runner', '', 698572591, 11, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(22, 'weed', '', 955941834, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(23, 'princess', '', 411819776, 11, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(24, 'bard', '', 355706781, 11, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(25, 'arm', '', 214734463, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(26, 'whimsey', '', 745945584, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(27, 'leader', '', 186927683, 4, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(28, 'hoof', '', 319826400, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(29, 'flame', '', 819738573, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(30, 'weaver', '', 267712694, 14, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(31, 'weasel', '', 619696512, 11, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(32, 'scowl', '', 248852870, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(33, 'dive', '', 816185581, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(34, 'antler', '', 695564626, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(35, 'otter', '', 173936937, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(36, 'back', '', 338641573, 7, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(37, 'speaker', '', 784341064, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(38, 'painter', '', 313409826, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(39, 'vole', '', 969881983, 4, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(40, 'parrot', '', 154801232, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(41, 'lizard', '', 160168970, 4, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(42, 'horn', '', 470649477, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(43, 'brow', '', 657412557, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(44, 'knight', '', 309636915, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(45, 'skinner', '', 985293169, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(46, 'seer', '', 284840431, 10, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(47, 'butterfly', '', 887219548, 11, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(48, 'boot', '', 876784228, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(49, 'samurai', '', 879923043, 7, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(50, 'sting', '', 657513980, 3, b'0', '2018-07-25 11:35:16', '2018-07-25 11:35:16');
/*!40000 ALTER TABLE `machines` ENABLE KEYS */;

-- 傾印  表格 pcb.machine_version 結構
CREATE TABLE IF NOT EXISTS `machine_version` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `machine_id` int(10) unsigned NOT NULL,
  `current_version` varchar(24) NOT NULL,
  `target_version` varchar(24) NOT NULL,
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `last_connect_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_machine_version_machines` (`machine_id`),
  CONSTRAINT `FK_machine_version_machines` FOREIGN KEY (`machine_id`) REFERENCES `machines` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='機器版本';

-- 正在傾印表格  pcb.machine_version 的資料：~0 rows (大約)
DELETE FROM `machine_version`;
/*!40000 ALTER TABLE `machine_version` DISABLE KEYS */;
/*!40000 ALTER TABLE `machine_version` ENABLE KEYS */;

-- 傾印  表格 pcb.maps 結構
CREATE TABLE IF NOT EXISTS `maps` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `map_name` varchar(32) NOT NULL,
  `key` varchar(32) NOT NULL,
  `value` varchar(32) NOT NULL,
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='其他對應表';

-- 正在傾印表格  pcb.maps 的資料：~0 rows (大約)
DELETE FROM `maps`;
/*!40000 ALTER TABLE `maps` DISABLE KEYS */;
/*!40000 ALTER TABLE `maps` ENABLE KEYS */;

-- 傾印  表格 pcb.permissions 結構
CREATE TABLE IF NOT EXISTS `permissions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `sort` int(11) NOT NULL DEFAULT '0',
  `description` varchar(200) NOT NULL DEFAULT '',
  `admin_only` bit(1) NOT NULL DEFAULT b'0',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COMMENT='權限表';

-- 正在傾印表格  pcb.permissions 的資料：~23 rows (大約)
DELETE FROM `permissions`;
/*!40000 ALTER TABLE `permissions` DISABLE KEYS */;
INSERT INTO `permissions` (`id`, `name`, `sort`, `description`, `admin_only`, `update_time`, `created_time`) VALUES
	(1, 'accounting_view', 1, '', b'0', '2018-05-16 18:16:08', '2018-05-15 16:18:04'),
	(2, 'operations_view', 2, '', b'0', '2018-05-16 18:16:10', '2018-05-15 16:18:20'),
	(3, 'transactions_view', 3, '', b'0', '2018-05-16 18:16:13', '2018-05-15 16:18:30'),
	(4, 'machinelist_view', 4, '', b'0', '2018-05-16 18:16:16', '2018-05-15 16:18:38'),
	(5, 'machinelist_create', 4, '', b'1', '2018-05-16 18:16:21', '2018-05-15 16:18:49'),
	(6, 'machinelist_edit', 4, '', b'0', '2018-05-16 18:16:24', '2018-05-15 16:18:57'),
	(7, 'machinelist_delete', 4, '', b'1', '2018-05-16 18:16:42', '2018-05-15 16:19:02'),
	(8, 'machinetransfer_view', 5, '', b'0', '2018-05-16 18:16:44', '2018-05-15 16:19:11'),
	(9, 'machinetransfer_edit', 5, '', b'0', '2018-05-16 18:16:45', '2018-05-15 16:19:26'),
	(10, 'coreuser_view', 6, '', b'1', '2018-05-16 18:16:47', '2018-05-15 16:19:33'),
	(11, 'coreuser_create', 6, '', b'1', '2018-05-16 18:16:49', '2018-05-15 16:19:40'),
	(12, 'coreuser_edit', 6, '', b'1', '2018-05-16 18:16:51', '2018-05-15 16:19:45'),
	(13, 'coreuser_delete', 6, '', b'1', '2018-05-16 18:16:55', '2018-05-15 16:19:50'),
	(14, 'agency_view', 7, '', b'0', '2018-05-16 18:16:57', '2018-05-15 16:19:58'),
	(15, 'agency_create', 7, '', b'0', '2018-05-16 18:17:00', '2018-05-15 16:20:04'),
	(16, 'agency_edit', 7, '', b'0', '2018-05-16 18:17:01', '2018-05-15 16:20:11'),
	(17, 'agency_delete', 7, '', b'0', '2018-05-16 18:17:03', '2018-05-15 16:20:17'),
	(18, 'versionsetting_view', 8, '', b'1', '2018-07-03 15:17:41', '2018-05-15 16:20:25'),
	(19, 'versionsetting_edit', 8, '', b'1', '2018-05-16 18:17:06', '2018-05-15 16:20:32'),
	(20, 'jpstatus_view', 9, '', b'1', '2018-07-03 15:17:39', '2018-05-15 16:20:40'),
	(21, 'reportjackpot_view', 10, '', b'0', '2018-07-02 17:10:34', '2018-07-02 16:16:25'),
	(25, 'reportmachine_view', 10, '', b'0', '2018-07-02 17:10:34', '2018-07-02 16:16:25'),
	(26, 'reportrevenue_view', 10, '', b'0', '2018-07-03 15:12:45', '2018-07-02 16:16:25');
/*!40000 ALTER TABLE `permissions` ENABLE KEYS */;

-- 傾印  表格 pcb.roles 結構
CREATE TABLE IF NOT EXISTS `roles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `description` varchar(200) NOT NULL DEFAULT '',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='角色表';

-- 正在傾印表格  pcb.roles 的資料：~2 rows (大約)
DELETE FROM `roles`;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` (`id`, `name`, `description`, `update_time`, `created_time`) VALUES
	(1, 'coreuser', 'default admin', '2018-05-15 16:32:53', '2018-05-15 16:16:54'),
	(2, 'agency', 'default agency', '2018-05-15 16:17:29', '2018-05-15 16:17:05');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;

-- 傾印  表格 pcb.role_permission 結構
CREATE TABLE IF NOT EXISTS `role_permission` (
  `role_id` int(10) unsigned NOT NULL,
  `permission_id` int(10) unsigned NOT NULL,
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`role_id`,`permission_id`),
  KEY `FK_role_permission_permissions` (`permission_id`),
  CONSTRAINT `FK_role_permission_permissions` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`),
  CONSTRAINT `FK_role_permission_roles` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='角色權限對應表';

-- 正在傾印表格  pcb.role_permission 的資料：~37 rows (大約)
DELETE FROM `role_permission`;
/*!40000 ALTER TABLE `role_permission` DISABLE KEYS */;
INSERT INTO `role_permission` (`role_id`, `permission_id`, `created_time`, `update_time`) VALUES
	(1, 1, '2018-05-15 16:21:11', '2018-05-15 16:21:11'),
	(1, 2, '2018-05-15 16:21:11', '2018-05-15 16:21:11'),
	(1, 3, '2018-05-15 16:24:47', '2018-05-15 16:24:47'),
	(1, 4, '2018-05-15 16:25:09', '2018-05-15 16:25:09'),
	(1, 5, '2018-05-15 16:28:06', '2018-05-15 16:28:06'),
	(1, 6, '2018-05-15 16:28:06', '2018-05-15 16:28:06'),
	(1, 7, '2018-05-15 16:28:06', '2018-05-15 16:28:06'),
	(1, 8, '2018-05-15 16:28:06', '2018-05-15 16:28:06'),
	(1, 9, '2018-05-15 16:28:06', '2018-05-15 16:28:06'),
	(1, 10, '2018-05-15 16:28:06', '2018-05-15 16:28:06'),
	(1, 11, '2018-05-15 16:28:06', '2018-05-15 16:28:06'),
	(1, 12, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 13, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 14, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 15, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 16, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 17, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 18, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 19, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 20, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 21, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 25, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(1, 26, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 1, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 2, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 3, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 4, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 6, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 8, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 9, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 14, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 15, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 16, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 17, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 21, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 25, '2018-05-15 16:28:07', '2018-05-15 16:28:07'),
	(2, 26, '2018-05-15 16:28:07', '2018-05-15 16:28:07');
/*!40000 ALTER TABLE `role_permission` ENABLE KEYS */;

-- 傾印  程序 pcb.sp_addMachine 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_addMachine`(
	IN `p_exeid` INT,
	IN `p_pcbID` VARCHAR(50),
	IN `p_storeName` VARCHAR(50),
	IN `p_userID` INT





)
IF NOT EXISTS (SELECT 1 FROM machines WHERE pcb_id = p_pcbID) THEN
BEGIN
	INSERT INTO machines(pcb_id, store_name, user_id) VALUES(p_pcbID, p_storeName, p_userID);
	SELECT LAST_INSERT_ID() AS machine_id;
END;
ELSE
BEGIN
	SIGNAL SQLSTATE '45000'
 	SET MESSAGE_TEXT = 'MachineID duplicated.'; 	
END;
END IF//
DELIMITER ;

-- 傾印  程序 pcb.sp_addTransaction 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_addTransaction`(
	IN `p_pcb_id` VARCHAR(50),
	IN `p_round_id` VARCHAR(50),
	IN `p_money_to_credit_radio` DOUBLE,
	IN `p_transaction_type` INT,
	IN `p_start_credit` INT,
	IN `p_result_credit` INT,
	IN `p_credit_in` INT,
	IN `p_credit_out` INT,
	IN `p_credit_type` INT,
	IN `p_original_bet` INT,
	IN `p_bet` INT,
	IN `p_win` INT,
	IN `p_jp1_win` INT,
	IN `p_jp2_win` INT,
	IN `p_jp3_win` INT,
	IN `p_jp4_win` INT,
	IN `p_game_type` INT,
	IN `p_game_id` INT,
	IN `p_memo` JSON,
	IN `p_created_time` DATETIME






)
BEGIN
	INSERT INTO transactions(pcb_id,round_id,currency_id,money_to_credit_radio,transaction_type,start_credit,result_credit,credit_in,credit_out,credit_type,original_bet,bet,win,jp1_win,jp2_win,jp3_win,jp4_win,game_type,game_id,memo,created_time)
	VALUES(p_pcb_id,p_round_id,1,p_money_to_credit_radio,p_transaction_type,p_start_credit,p_result_credit,p_credit_in,p_credit_out,p_credit_type,p_original_bet,p_bet,p_win,p_jp1_win,p_jp2_win,p_jp3_win,p_jp4_win,p_game_type,p_game_id,p_memo,p_created_time);
	SELECT LAST_INSERT_ID() AS transaction_id;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_addUser 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_addUser`(
	IN `p_ip` VARCHAR(50),
	IN `p_exeid` INT,
	IN `p_account` VARCHAR(50),
	IN `p_pwd` VARCHAR(500),
	IN `p_admin` BIT







)
proc_label:BEGIN
	DECLARE EXIT HANDLER for sqlexception
	BEGIN
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT 0;
	ROLLBACK;
	RESIGNAL;
	END;
	/*
	DECLARE EXIT HANDLER for sqlwarning
	BEGIN
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT 0;
	ROLLBACK;
	RESIGNAL;
	END;
	*/
	START TRANSACTION;
	IF NOT EXISTS (SELECT 1 FROM users WHERE account = p_account) THEN
	BEGIN
		SET @exeIsAdmin = EXISTS(SELECT 1 FROM users WHERE id = p_exeid AND admin = 1);
		IF !@exeIsAdmin AND p_admin THEN
		BEGIN
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Permission denied.';
		 	LEAVE proc_label;
		END;
		ELSE
		BEGIN
			INSERT INTO users(account, encrypted_password, admin) VALUES(p_account, p_pwd, p_admin);
			SET @userID = LAST_INSERT_ID();
			IF p_admin AND @exeIsAdmin THEN
			BEGIN
				SELECT id INTO @defaultAdminRoleID FROM roles WHERE name = "coreuser" LIMIT 1;
				#exe account is default role, add default role to new account
				IF EXISTS (SELECT 1 FROM user_role WHERE user_id = p_exeid AND role_id = @defaultAdminRoleID) THEN
				BEGIN
					INSERT INTO user_role(user_id, role_id) VALUES(@userID, @defaultAdminRoleID);
				END;
				#exe account is specific permissions, add inherit permissions to new account.
				ELSE
				BEGIN
					INSERT INTO roles(name, description) VALUES(p_account, "specific permissions");
					SET @roleID = LAST_INSERT_ID();
					INSERT INTO user_role(user_id, role_id) VALUES(@userID, @roleID);
					INSERT INTO role_permission(role_id, permission_id) 
						SELECT @roleID AS role_id, permission_id FROM role_permission WHERE role_id = (SELECT role_id FROM user_role WHERE user_id = p_exeid);
				END;
				END IF;
			END;
			ELSE
			BEGIN
				SELECT id INTO @defaultAgencyRoleID FROM roles WHERE name = "agency";
				#exe account is admin, add default agency role to new account.
				#exe account is agency and default role, add default agency role to new account.
				IF @exeIsAdmin OR EXISTS(SELECT 1 FROM user_role WHERE user_id = p_exeid AND role_id = @defaultAgencyRoleID) THEN
				BEGIN
					INSERT INTO user_role(user_id, role_id) VALUES(@userID, @defaultAgencyRoleID);
				END;
				#exe account is agency and specific permissions, add inherit permissions to new account.
				ELSE
				BEGIN
					INSERT INTO roles(name, description) VALUES(p_account, "specific permissions");
					SET @roleID = LAST_INSERT_ID();
					INSERT INTO user_role(user_id, role_id) VALUES(@userID, @roleID);
					INSERT INTO role_permission(role_id, permission_id) 
						SELECT @roleID AS role_id, permission_id FROM role_permission WHERE role_id = (SELECT role_id FROM user_role WHERE user_id = p_exeid);
				END;
				END IF;
			END;
			END IF;
			#add user_node start
--    		SET @rowCount = ROW_COUNT();
			SELECT lft INTO @myLeft FROM user_node WHERE user_id = p_exeid;
			SELECT COUNT(rgt) INTO @nouse FROM user_node WHERE rgt > (SELECT rgt FROM user_node
			WHERE user_id = p_exeid) OR lft > (SELECT rgt FROM user_node
			WHERE user_id = p_exeid) OR user_id = p_exeid FOR UPDATE;
			
			UPDATE user_node SET rgt = rgt + 2 WHERE rgt > @myLeft;
			UPDATE user_node SET lft = lft + 2 WHERE lft > @myLeft;
			
			INSERT INTO user_node(user_id, parent_id, lft, rgt) VALUES(@userID, p_exeid, @myLeft + 1, @myLeft + 2);
			
			#add user_node end
		END;
		END IF;
	END;
	ELSE
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Account Name duplicated.';
	END;
	END IF;
	COMMIT;
	SELECT @userID AS user_id;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_deleteMachine 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_deleteMachine`(
	IN `p_exeid` INT,
	IN `p_id` INT








)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	IF NOT EXISTS (SELECT 1 FROM transactions where pcb_id = (SELECT pcb_id FROM machines WHERE id = p_id) LIMIT 1) THEN
	BEGIN
		SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
		SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS ( 
			SELECT 1
			FROM machines m RIGHT JOIN user_node un ON m.user_id = un.user_id AND !ISNULL(m.id) AND (un.lft BETWEEN d_lft AND d_rgt OR d_isAdmin)
			WHERE delete_flag <> 1 AND m.id = p_id
			LIMIT 1
		);
		IF EXISTS (SELECT 1 FROM _tmp) THEN
		BEGIN
			DELETE FROM machines WHERE id = p_id;
		END;
		ELSE
		BEGIN
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Permission denied.';
		END;
		END IF;
	END;
	ELSE
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Exist transaction records, can''t delete.';
	END;
	END IF;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_editMachine 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_editMachine`(
	IN `p_exeid` INT,
	IN `p_id` INT,
	IN `p_storeName` VARCHAR(50),
	IN `p_userID` INT












)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS ( 
		SELECT SQL_CALC_FOUND_ROWS id, store_name, machine_name, pcb_id, m.user_id, m.created_time, m.update_time 
		FROM machines m RIGHT JOIN user_node un ON m.user_id = un.user_id AND !ISNULL(m.id) AND (un.lft BETWEEN d_lft AND d_rgt OR d_isAdmin)
		WHERE delete_flag <> 1 AND m.id = p_id
		LIMIT 1
	);
	IF EXISTS(SELECT 1 FROM _tmp) THEN
	BEGIN
		UPDATE machines SET store_name = p_storeName, user_id = p_userID
		WHERE id = p_id;
		SELECT 1;
	END;
	ELSE
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied.';
	END;
	END IF;
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_editSelfPassword 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_editSelfPassword`(
	IN `p_exeid` INT,
	IN `p_oldPwd` VARCHAR(500)












,
	IN `p_pwd` VARCHAR(500)














)
BEGIN
	DECLARE exit handler for sqlexception
	BEGIN
	ROLLBACK;
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT 0;
	RESIGNAL;
	END;
	
	IF EXISTS(SELECT 1 FROM users WHERE id = p_exeid AND encrypted_password = p_oldPwd) AND p_pwd > '' THEN
		BEGIN
			UPDATE users SET encrypted_password = p_pwd
			WHERE id = p_exeid;
			INSERT INTO log_user_change(id, `action`, memo) VALUES(p_exeid, 3, 'User changed password');
		END;
	ELSE
		BEGIN
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Password change failed.'; 	
		END;
	END IF;
	SELECT 1;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_editUserActive 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_editUserActive`(
	IN `p_exeid` INT,
	IN `p_userid` INT





)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	IF EXISTS(SELECT 1 FROM users WHERE id = p_userid) AND (d_isAdmin OR EXISTS(SELECT 1 FROM user_node WHERE user_id = p_userid AND lft BETWEEN d_lft AND d_rgt)) THEN
		BEGIN
			SET @currentState = null;
			SELECT state FROM users WHERE id = p_userid LIMIT 1 INTO @currentState;
			IF @currentState = 1 THEN
				BEGIN
					UPDATE users SET state = 2
					WHERE id = p_userid;
					INSERT INTO log_user_change(user_id, `action`, memo) VALUES(p_userid, 2, CONCAT('Set deactive by user ', p_exeid));
					SELECT 2 AS `state`;
				END;
			ELSE IF @currentState = 2 THEN
				BEGIN
					UPDATE users SET state = 1
					WHERE id = p_userid;
					INSERT INTO log_user_change(user_id, `action`, memo) VALUES(p_userid, 2, CONCAT('Set active by user ', p_exeid));
					SELECT 1 AS `state`;
				END;
				END IF;
			END IF;
		END;
	ELSE
		BEGIN
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Account not found.';
		END;
	END IF;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_editUserPassword 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_editUserPassword`(
	IN `p_exeid` INT,
	IN `p_userid` INT,
	IN `p_pwd` VARCHAR(500)












)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE exit handler for sqlexception
	BEGIN
	ROLLBACK;
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT 0;
	RESIGNAL;
	END;
	
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	IF EXISTS(SELECT 1 FROM users WHERE id = p_userid) AND p_pwd > '' AND (d_isAdmin OR EXISTS(SELECT 1 FROM user_node WHERE user_id = p_userid AND lft BETWEEN d_lft AND d_rgt)) THEN
		BEGIN
			UPDATE users SET encrypted_password = p_pwd
			WHERE id = p_userid;
			INSERT INTO log_user_change(user_id, `action`, memo) VALUES(p_userid, 3, CONCAT('Password changed by user ', p_exeid));
		END;
	ELSE
		BEGIN
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Account not found or password is blank.'; 	
		END;
	END IF;
	SELECT 1;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_editUserPermissions 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_editUserPermissions`(
	IN `p_exeid` INT,
	IN `p_userid` INT,
	IN `p_permissions` VARCHAR(500)





























)
proc_label:BEGIN
	DECLARE d_isExeAdmin BOOL;
	DECLARE d_isAdmin BOOL;
	DECLARE d_account VARCHAR(128);
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_roleID INT;
	DECLARE d_permissionList TEXT;
	DECLARE d_permissionStub TEXT;
	DECLARE d_permissionCount TEXT;
	DECLARE d_permissionID INT;
	DECLARE d_permission VARCHAR(128);
	DECLARE exit handler for sqlexception
	BEGIN
	ROLLBACK;
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT 0;
	RESIGNAL;
	END;
	
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	
	START TRANSACTION;
	SET d_roleID = 0;
	SET d_permissionList = CONCAT('''',REPLACE(REPLACE(p_permissions ,' ',''),',',QUOTE(',')),'''');
	SET d_permissionStub = REPLACE(d_permissionList,',','');
	SET d_permissionCount = CASE WHEN(ISNULL(p_permissions) OR p_permissions = '') THEN 0 ELSE (LENGTH(d_permissionList) - LENGTH(d_permissionStub) + 1) END;
	SELECT account,admin INTO d_account, d_isAdmin FROM users WHERE id = p_userid;
	
	IF p_userid = p_exeid OR (!d_isExeAdmin AND !EXISTS(SELECT 1 FROM user_node WHERE user_id = p_userid AND lft BETWEEN d_lft AND d_rgt)) THEN
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = d_isAdmin;
	 	LEAVE proc_label;
	END;
	END IF;
	
	IF d_account = '' OR ISNULL(d_account) THEN
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Account not found.';
	 	LEAVE proc_label;
	END;
	END IF;
	
	#IF role is default, create new role map to user
	IF EXISTS(SELECT 1 FROM roles r INNER JOIN user_role ur ON ur.user_id = p_userid AND ur.role_id = r.id WHERE (r.name = "coreuser" OR r.name = "agency")) THEN
	BEGIN
		INSERT INTO roles(name, description) VALUES(d_account, "specific permissions");
		SET d_roleID = LAST_INSERT_ID();
		UPDATE user_role SET role_id = d_roleID WHERE user_id = p_userid;
	END;
	ELSE
	BEGIN
		SELECT id INTO d_roleID FROM roles r INNER JOIN user_role ur ON ur.user_id = p_userid AND ur.role_id = r.id;
	END;
	END IF;
	
	DELETE FROM role_permission WHERE role_id = d_roleID;
	
	SET @x = 0;
	WHILE @x < d_permissionCount DO
		SET @x = @x + 1;
		SET d_permission = SUBSTRING_INDEX(SUBSTRING_INDEX(p_permissions, ',', @x), ',', -1);
		SELECT id INTO d_permissionID FROM permissions WHERE name = d_permission;
		
		IF ISNULL(d_permissionID) THEN
		BEGIN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Input permission string error, can not found.';
			LEAVE proc_label;
		END;
		END IF;
		
		IF NOT EXISTS(SELECT 1 FROM role_permission rp INNER JOIN user_role ur ON ur.user_id = p_exeid AND rp.role_id = ur.role_id WHERE rp.permission_id = d_permissionID)  OR
			EXISTS(SELECT 1 FROM role_permission rp INNER JOIN permissions p ON rp.permission_id = d_permissionID AND rp.permission_id = p.id WHERE admin_only = 1 AND !d_isAdmin)
		THEN
		BEGIN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Permission denied.';
			LEAVE proc_label;
		END;
		ELSE
		BEGIN
			INSERT INTO role_permission(role_id, permission_id) VALUES(d_roleID, d_permissionID);
		END;
		END IF;
	END WHILE;
   SET @rowCount = 1;
	COMMIT;
	SELECT @rowCount;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getAccountings 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getAccountings`(
	IN `p_exeid` INT,
	IN `p_users` TEXT,
	IN `p_stores` TEXT,
	IN `p_machines` TEXT,
	IN `p_startTime` DATETIME,
	IN `p_endTime` DATETIME,
	IN `p_groupBy` VARCHAR(50),
	IN `p_timeRange` INT
























)
    DETERMINISTIC
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	DECLARE d_now DATE;
	DECLARE d_pcb_ids VARCHAR(20000);
	DECLARE d_columns_sql_string VARCHAR(500);
	DECLARE d_group_by_sql_string VARCHAR(200);
	DECLARE d_group_interval_sql_string VARCHAR(200);
	DECLARE d_no_search BOOL;
	SET d_now = DATE(DATE_ADD(NOW(), INTERVAL -6 HOUR));
	SET d_no_search = (ISNULL(p_users) AND ISNULL(p_stores) AND ISNULL(p_machines));
	
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
		(ISNULL(p_users) OR FIND_IN_SET(user_id, p_users)) AND
		(ISNULL(p_stores) OR FIND_IN_SET(store_name, p_stores)) AND
		(ISNULL(p_machines) OR FIND_IN_SET(pcb_id, p_machines));
	SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;
	
	IF p_groupBy = 'machine' THEN
	BEGIN
		SET d_columns_sql_string = '
			store_name,
			machine_name,
			t.pcb_id,
			account';
		SET d_group_by_sql_string = 't.pcb_id';
	END;
	ELSEIF p_groupBy = 'user' THEN
	BEGIN
		SET d_columns_sql_string = '
			account';
		SET d_group_by_sql_string = 'u.id';
	END;
	ELSEIF p_groupBy = 'storename' THEN
	BEGIN
		SET d_columns_sql_string = '
			store_name';
		SET d_group_by_sql_string = 'store_name';
	END;
	ELSE
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Paramater "group" invaild.';
	END;
	END IF;

	SET @d_sqlString1 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1 AS(
			SELECT 
				pcb_id,
				DATE_ADD(created_time, INTERVAL -(MINUTE(created_time)*60+SECOND(created_time)) + MINUTE(created_time) div ',p_timeRange,' * ',p_timeRange,' * 60 SECOND) AS range_start_time,
				SUM(credit_in) AS total_in,
				SUM(credit_out) AS total_out,
				SUM(bet) AS total_bet,
				SUM(win) AS total_win,
				SUM(jp1_win) AS total_jp1_win,
				SUM(jp2_win) AS total_jp2_win,
				SUM(jp3_win) AS total_jp3_win,
				SUM(jp4_win) AS total_jp4_win,
				SUM(CASE WHEN credit_type = 3 THEN credit_in ELSE 0 END) AS total_coin_in,
				SUM(CASE WHEN credit_type = 5 THEN credit_in ELSE 0 END) AS total_bill_in,
				SUM(CASE WHEN credit_type = 1 THEN credit_in ELSE 0 END) AS total_key_in,
				SUM(CASE WHEN credit_type = 4 THEN credit_out ELSE 0 END) AS total_coin_out,
				SUM(CASE WHEN credit_type = 6 THEN credit_out ELSE 0 END) AS total_bill_out,
				SUM(CASE WHEN credit_type = 2 THEN credit_out ELSE 0 END) AS total_key_out,
				SUM(CASE WHEN bet > 0 THEN 1 ELSE 0 END) AS total_play_times,
				SUM(CASE WHEN bet > 0 AND (win > 0 OR jp4_win > 0 OR jp3_win > 0 OR jp2_win > 0 OR jp1_win> 0) THEN 1 ELSE 0 END) AS total_win_times
			FROM transactions t 
			WHERE created_time BETWEEN ''',p_startTime,''' AND ''',p_endTime,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''))
			GROUP BY 
				range_start_time, pcb_id
			ORDER BY NULL);
		');
	SET @d_sqlString2 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
		SELECT SQL_CALC_FOUND_ROWS *,
				total_win_times/total_play_times*100 AS hit_rate,
				total_out/total_in*100 AS out_rate,
				total_win_with_jp/total_bet*100 AS win_rate_with_jp,
				total_win/total_bet*100 AS win_rate
			FROM (SELECT  
			range_start_time,
			DATE_ADD(DATE_ADD(range_start_time, INTERVAL ',p_timeRange,' MINUTE), INTERVAL -1 SECOND) AS range_end_time,
			SUM(total_jp1_win + total_jp2_win + total_jp3_win + total_jp4_win) AS total_jp_win,
			SUM(total_win + total_jp1_win + total_jp2_win + total_jp3_win + total_jp4_win) AS total_win_with_jp,
			SUM(total_in) AS total_in,
			SUM(total_out) AS total_out,
			SUM(total_bet) AS total_bet,
			SUM(total_win) AS total_win,
			SUM(total_jp1_win) AS total_jp1_win,
			SUM(total_jp2_win) AS total_jp2_win,
			SUM(total_jp3_win) AS total_jp3_win,
			SUM(total_jp4_win) AS total_jp4_win,
			SUM(total_coin_in) AS total_coin_in,
			SUM(total_bill_in) AS total_bill_in,
			SUM(total_key_in) AS total_key_in,
			SUM(total_coin_out) AS total_coin_out,
			SUM(total_bill_out) AS total_bill_out,
			SUM(total_key_out) AS total_key_out,
			SUM(total_play_times) AS total_play_times,
			SUM(total_win_times) AS total_win_times,
			', d_columns_sql_string , ' 
			FROM _tmp1 t
			INNER JOIN machines m ON t.pcb_id = m.pcb_id
			INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
			INNER JOIN users u ON (un.user_id = u.id) -- AND (u.id = m.user_id)
			WHERE m.delete_flag <> 1 -- AND t.calculated_created_date < ''',d_now,'''
			GROUP BY range_start_time, ' , d_group_by_sql_string , '
			ORDER BY t.range_start_time) v);
		');
	
	PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString1;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString2;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'SELECT *, FOUND_ROWS() AS total FROM _tmp2;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
		
	PREPARE stmt FROM 'COMMIT;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	 SELECT @d_sqlString;
	
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getDashboard 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getDashboard`(
	IN `p_exeid` INT,
	IN `p_users` TEXT,
	IN `p_stores` TEXT,
	IN `p_now` DATETIME












)
    COMMENT 'index'
BEGIN
    DECLARE d_isAdmin BOOL;
    DECLARE d_lft INT;
    DECLARE d_rgt INT;
    DECLARE d_total INT;
    DECLARE d_pcb_ids VARCHAR(20000);
    DECLARE d_group_interval_sql_string VARCHAR(200);
    DECLARE d_no_search BOOL;
    DECLARE d_start_time DATETIME;
    DECLARE d_calculated_now DATETIME;
    SET d_no_search = (ISNULL(p_users) AND ISNULL(p_stores));
    SET d_start_time = CONCAT(YEAR(p_now), '/', MONTH(p_now), '/1 06:00:00');
    SET d_calculated_now = DATE_ADD(p_now, INTERVAL -6 HOUR);

    DROP TEMPORARY TABLE IF EXISTS `_tmp1`;
    DROP TEMPORARY TABLE IF EXISTS `_tmp2`;
    SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
    SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
    SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
        (ISNULL(p_users) OR FIND_IN_SET(user_id, p_users)) AND
        (ISNULL(p_stores) OR FIND_IN_SET(store_name, p_stores));
    SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;

    SET @d_sqlString1 = CONCAT('
        CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1 AS(
        		SELECT SQL_CALC_FOUND_ROWS 
			       calculated_created_date,
                SUM(total_win_times)/SUM(total_play_times)*100 AS hit_rate,
                SUM(total_out)/SUM(total_in)*100 AS out_rate,
                SUM(total_win)/SUM(total_bet)*100 AS win_rate,
                SUM(total_in) AS total_in,
                SUM(total_out) AS total_out,
                SUM(total_bet) AS total_bet,
                SUM(total_win) AS total_win,
                SUM(total_play_times) AS total_play_times,
                SUM(total_win_times) AS total_win_times
                FROM (
		          	SELECT  
		                pcb_id,
		                SUM(credit_in) AS total_in,
		                SUM(credit_out) AS total_out,
		                SUM(bet) AS total_bet,
		                SUM(win+jp1_win+jp2_win+jp3_win+jp4_win) AS total_win,
		                DATE_ADD(t.created_time, INTERVAL -6 HOUR) AS calculated_created_date,
		                SUM(CASE WHEN bet > 0 THEN 1 ELSE 0 END) AS total_play_times,
		                SUM(CASE WHEN bet > 0 AND (win > 0 OR jp4_win > 0 OR jp3_win > 0 OR jp2_win > 0 OR jp1_win> 0) THEN 1 ELSE 0 END) AS total_win_times
		                FROM transactions t 
		                WHERE  created_time BETWEEN ''',d_start_time,''' AND ''',p_now,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''))
		                GROUP BY 
		                    YEAR(calculated_created_date), MONTH(calculated_created_date), DAY(calculated_created_date), pcb_id
		                ORDER BY NULL) t
                INNER JOIN machines m ON t.pcb_id = m.pcb_id
                INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
                INNER JOIN users u ON (un.user_id = u.id) 
                WHERE m.delete_flag <> 1
					 GROUP BY DAY(calculated_created_date)
        );
    ');
    
    SET @d_sqlString2 = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
		SELECT 1 AS id,CAST(0.0 AS DECIMAL) AS hit_rate,CAST(0 AS DECIMAL) out_rate,CAST(0 AS DECIMAL) win_rate,0 AS total_in,0 AS total_out,0 AS total_bet,0 AS total_win,0 AS total_play_times,0 AS total_win_times);
		');
    SET @d_sqlString3 = CONCAT('INSERT INTO _tmp2 SELECT 2 AS ID,0.0 AS hit_rate,0.0 out_rate,0.0 win_rate,0 AS total_in,0 AS total_out,0 AS total_bet,0 AS total_win,0 AS total_play_times,0 AS total_win_times;
		');
    SET @d_sqlString4 = CONCAT('INSERT INTO _tmp2 SELECT 3 AS ID,0.0 AS hit_rate,0.0 out_rate,0.0 win_rate,0 AS total_in,0 AS total_out,0 AS total_bet,0 AS total_win,0 AS total_play_times,0 AS total_win_times;
		');
    SET @d_sqlString5 = CONCAT('INSERT INTO _tmp2 SELECT 4 AS ID,0.0 AS hit_rate,0.0 out_rate,0.0 win_rate,0 AS total_in,0 AS total_out,0 AS total_bet,0 AS total_win,0 AS total_play_times,0 AS total_win_times;
		');
    SET @d_sqlString6 = CONCAT('UPDATE _tmp2 dest, (SELECT SUM(total_win_times)/SUM(total_play_times)*100 AS hit_rate,SUM(total_out)/SUM(total_in)*100 AS out_rate,SUM(total_win)/SUM(total_bet)*100 AS win_rate,SUM(total_in) AS total_in,SUM(total_out) AS total_out,SUM(total_bet) AS total_bet,SUM(total_win) AS total_win,SUM(total_play_times) AS total_play_times,SUM(total_win_times) AS total_win_times
		FROM _tmp1 WHERE DAY(calculated_created_date) = ',DAY(d_calculated_now),') src SET dest.hit_rate=src.hit_rate,dest.out_rate=src.out_rate,dest.win_rate=src.win_rate,dest.total_in=src.total_in,dest.total_out=src.total_out,dest.total_bet=src.total_bet,dest.total_win=src.total_win,dest.total_play_times=src.total_play_times,dest.total_win_times=src.total_win_times
		WHERE dest.ID=1;
	');
    SET @d_sqlString7 = CONCAT('UPDATE _tmp2 dest, (SELECT SUM(total_win_times)/SUM(total_play_times)*100 AS hit_rate,SUM(total_out)/SUM(total_in)*100 AS out_rate,SUM(total_win)/SUM(total_bet)*100 AS win_rate,SUM(total_in) AS total_in,SUM(total_out) AS total_out,SUM(total_bet) AS total_bet,SUM(total_win) AS total_win,SUM(total_play_times) AS total_play_times,SUM(total_win_times) AS total_win_times
		FROM _tmp1 WHERE DAY(calculated_created_date) = ',DAY(DATE_ADD(d_calculated_now, INTERVAL -1 DAY)),') src SET dest.hit_rate=src.hit_rate,dest.out_rate=src.out_rate,dest.win_rate=src.win_rate,dest.total_in=src.total_in,dest.total_out=src.total_out,dest.total_bet=src.total_bet,dest.total_win=src.total_win,dest.total_play_times=src.total_play_times,dest.total_win_times=src.total_win_times
		WHERE dest.ID=2;
	');
    SET @d_sqlString8 = CONCAT('UPDATE _tmp2 dest, (SELECT SUM(total_win_times)/SUM(total_play_times)*100 AS hit_rate,SUM(total_out)/SUM(total_in)*100 AS out_rate,SUM(total_win)/SUM(total_bet)*100 AS win_rate,SUM(total_in) AS total_in,SUM(total_out) AS total_out,SUM(total_bet) AS total_bet,SUM(total_win) AS total_win,SUM(total_play_times) AS total_play_times,SUM(total_win_times) AS total_win_times
		FROM _tmp1 WHERE WEEK(calculated_created_date) = ',WEEK(d_calculated_now),' GROUP BY WEEK(calculated_created_date)) src SET dest.hit_rate=src.hit_rate,dest.out_rate=src.out_rate,dest.win_rate=src.win_rate,dest.total_in=src.total_in,dest.total_out=src.total_out,dest.total_bet=src.total_bet,dest.total_win=src.total_win,dest.total_play_times=src.total_play_times,dest.total_win_times=src.total_win_times
		WHERE dest.ID=3;
	');
    SET @d_sqlString9 = CONCAT('UPDATE _tmp2 dest, (SELECT SUM(total_win_times)/SUM(total_play_times)*100 AS hit_rate,SUM(total_out)/SUM(total_in)*100 AS out_rate,SUM(total_win)/SUM(total_bet)*100 AS win_rate,SUM(total_in) AS total_in,SUM(total_out) AS total_out,SUM(total_bet) AS total_bet,SUM(total_win) AS total_win,SUM(total_play_times) AS total_play_times,SUM(total_win_times) AS total_win_times
		FROM _tmp1 WHERE MONTH(calculated_created_date) = ',MONTH(d_calculated_now),' GROUP BY MONTH(calculated_created_date)) src SET dest.hit_rate=src.hit_rate,dest.out_rate=src.out_rate,dest.win_rate=src.win_rate,dest.total_in=src.total_in,dest.total_out=src.total_out,dest.total_bet=src.total_bet,dest.total_win=src.total_win,dest.total_play_times=src.total_play_times,dest.total_win_times=src.total_win_times
		WHERE dest.ID=4;
	');
	 
    PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString1;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString2;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString3;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString4;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString5;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString6;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString7;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString8;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString9;
    EXECUTE stmt;
    
    PREPARE stmt FROM 'SELECT * FROM _tmp2;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'COMMIT;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    /*
    SELECT @d_sqlString1;
    SELECT @d_sqlString2;
    SELECT @d_sqlString3;
    SELECT @d_sqlString4;
    SELECT @d_sqlString5;
    SELECT @d_sqlString6;
    SELECT @d_sqlString7;
    SELECT @d_sqlString8;
    SELECT @d_sqlString9;
    */
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getListMachines 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getListMachines`(
	IN `p_exeid` INT


)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	SELECT m.id, m.store_name, m.machine_name, m.pcb_id
	FROM machines m JOIN user_node un ON (m.user_id = un.user_id)
	WHERE delete_flag <> 1 AND (un.lft BETWEEN d_lft AND d_rgt OR d_isAdmin)
	ORDER BY m.pcb_id;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getListUsers 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getListUsers`(
	IN `p_exeid` INT

)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS (
		SELECT u.id, u.account
		FROM users u LEFT JOIN user_node un ON u.id = un.user_id AND (un.lft BETWEEN d_lft AND d_rgt OR d_isAdmin)
		ORDER BY u.account DESC
	);
	SELECT t.* FROM _tmp t;
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getMachine 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getMachine`(
	IN `p_exeid` INT,
	IN `p_id` INT












)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS ( 
		SELECT SQL_CALC_FOUND_ROWS id, store_name, machine_name, pcb_id, m.user_id, m.created_time, m.update_time 
		FROM machines m RIGHT JOIN user_node un ON m.user_id = un.user_id AND !ISNULL(m.id) AND (un.lft BETWEEN d_lft AND d_rgt OR d_isAdmin)
		WHERE delete_flag <> 1 AND m.id = p_id

		LIMIT 1
	);
	SELECT * FROM _tmp;
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getMachines 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getMachines`(
	IN `p_exeid` INT










)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS ( 
		SELECT SQL_CALC_FOUND_ROWS m.id, m.store_name, machine_name, pcb_id, m.user_id, m.created_time, m.update_time 
		FROM machines m JOIN user_node un ON (m.user_id = un.user_id)
		WHERE m.delete_flag <> 1 AND (un.lft BETWEEN d_lft AND d_rgt OR d_isAdmin)
		ORDER BY m.created_time DESC
	);
	SET d_total = FOUND_ROWS();
	SELECT d_total AS total,t.* FROM _tmp t;
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getMachinesWithUsers 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getMachinesWithUsers`(
	IN `p_exeid` INT











)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_exeLft INT;
	DECLARE d_exeRgt INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_exeLft, d_exeRgt FROM user_node WHERE user_id = p_exeid;
	SELECT IFNULL(m.id, 0) AS machine_id, IFNULL(m.store_name, '') AS store_name, IFNULL(m.machine_name, '') AS machine_name, IFNULL(m.pcb_id, '') AS pcb_id, t.user_id, u.account, parent_id FROM 
	machines AS m RIGHT JOIN
	users AS u ON m.user_id = u.id
	INNER JOIN(
		SELECT parent.user_id, parent.parent_id, COUNT(m.id) AS mcount
		FROM user_node AS node ,
	        user_node AS parent,
	        machines m
		WHERE node.lft BETWEEN parent.lft AND parent.rgt 
				AND (parent.lft BETWEEN d_exeLft AND d_exeRgt OR d_isAdmin)
		      AND node.user_id = m.user_id
		GROUP BY parent.user_id
		ORDER BY node.lft) t ON u.id = t.user_id
	ORDER BY parent_id;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getOperations 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getOperations`(
	IN `p_exeid` INT,
	IN `p_users` TEXT,
	IN `p_stores` TEXT,
	IN `p_machines` TEXT,
	IN `p_startTime` DATETIME,
	IN `p_endTime` DATETIME,
	IN `p_groupBy` VARCHAR(50)












,
	IN `p_groupInterval` VARCHAR(50)



















)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	DECLARE d_now DATE;
	DECLARE d_pcb_ids VARCHAR(20000);
	DECLARE d_columns_sql_string VARCHAR(500);
	DECLARE d_group_by_sql_string VARCHAR(200);
	DECLARE d_group_interval_sql_string VARCHAR(200);
	DECLARE d_no_search BOOL;
	SET d_now = DATE(DATE_ADD(NOW(), INTERVAL -6 HOUR));
	SET d_no_search = (ISNULL(p_users) AND ISNULL(p_stores) AND ISNULL(p_machines));
	
	DROP TEMPORARY TABLE IF EXISTS `_tmp1`;
	DROP TEMPORARY TABLE IF EXISTS `_tmp2`;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
		(ISNULL(p_users) OR FIND_IN_SET(user_id, p_users)) AND
		(ISNULL(p_stores) OR FIND_IN_SET(store_name, p_stores)) AND
		(ISNULL(p_machines) OR FIND_IN_SET(pcb_id, p_machines));
	SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;
	
	IF p_groupInterval = 'day' THEN
	BEGIN
		SET d_group_interval_sql_string = 'YEAR(calculated_created_date), MONTH(calculated_created_date), DAY(calculated_created_date)';
	END;
	ELSEIF p_groupInterval = 'week' THEN
	BEGIN
	--	SET d_group_interval_sql_string = 'YEAR(calculated_created_date), MONTH(calculated_created_date), DATE_ADD(calculated_created_date, interval (8 - dayofweek(calculated_created_date)) % 7 DAY)';
	SET d_group_interval_sql_string = 'YEAR(calculated_created_date), WEEK(calculated_created_date)';
	END;
	ELSEIF p_groupInterval = 'month' THEN
	BEGIN
		SET d_group_interval_sql_string = 'YEAR(calculated_created_date), MONTH(calculated_created_date)';
	END;
	ELSE
	BEGIN
		DROP TEMPORARY TABLE IF EXISTS `_tmp`;
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Paramater "group" invaild.';
	END;
	END IF;
	
	IF p_groupBy = 'machine' THEN
	BEGIN
		SET d_columns_sql_string = '
			m.pcb_id,
			store_name,
			machine_name,
			account';
		SET d_group_by_sql_string = CONCAT('GROUP BY ' , d_group_interval_sql_string , ',t.pcb_id');
	END;
	ELSEIF p_groupBy = 'user' THEN
	BEGIN
		SET d_columns_sql_string = '
			account';
		SET d_group_by_sql_string = CONCAT('GROUP BY ' , d_group_interval_sql_string , ',u.id');
	END;
	ELSEIF p_groupBy = 'storename' THEN
	BEGIN
		SET d_columns_sql_string = '
			store_name';
		SET d_group_by_sql_string = CONCAT('GROUP BY ' , d_group_interval_sql_string , ',store_name');
	END;
	ELSE
	BEGIN
		DROP TEMPORARY TABLE IF EXISTS `_tmp`;
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Paramater "group" invaild.';
	END;
	END IF;
	
	IF p_groupInterval = 'day' THEN
	BEGIN
		SET d_columns_sql_string = CONCAT(d_columns_sql_string, ', DATE(calculated_created_date) AS date');
	END;
	ELSEIF p_groupInterval = 'week' THEN
	BEGIN
		SET d_columns_sql_string = CONCAT(d_columns_sql_string, ', DATE(DATE_ADD(calculated_created_date, INTERVAL -DAYOFWEEK(calculated_created_date)+1 DAY)) AS date');
	END;
	ELSEIF p_groupInterval = 'month' THEN
	BEGIN
		SET d_columns_sql_string = CONCAT(d_columns_sql_string, ', DATE(DATE_ADD(calculated_created_date, INTERVAL -DAY(calculated_created_date)+1 DAY)) AS date');
	END;
	END IF;
	
	SET @d_sqlString1 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1 AS(
			SELECT  
				pcb_id,
				SUM(credit_in) AS total_in,
				SUM(credit_out) AS total_out,
				SUM(bet) AS total_bet,
				SUM(win) AS total_win,
				SUM(jp1_win) AS total_jp1_win,
				SUM(jp2_win) AS total_jp2_win,
				SUM(jp3_win) AS total_jp3_win,
				SUM(jp4_win) AS total_jp4_win,
				DATE_ADD(t.created_time, INTERVAL -6 HOUR) AS calculated_created_date,
				SUM(CASE WHEN credit_type = 3 THEN credit_in ELSE 0 END) AS total_coin_in,
				SUM(CASE WHEN credit_type = 5 THEN credit_in ELSE 0 END) AS total_bill_in,
				SUM(CASE WHEN credit_type = 1 THEN credit_in ELSE 0 END) AS total_key_in,
				SUM(CASE WHEN credit_type = 4 THEN credit_out ELSE 0 END) AS total_coin_out,
				SUM(CASE WHEN credit_type = 6 THEN credit_out ELSE 0 END) AS total_bill_out,
				SUM(CASE WHEN credit_type = 2 THEN credit_out ELSE 0 END) AS total_key_out,
				SUM(CASE WHEN bet > 0 THEN 1 ELSE 0 END) AS total_play_times,
				SUM(CASE WHEN bet > 0 AND (win > 0 OR jp4_win > 0 OR jp3_win > 0 OR jp2_win > 0 OR jp1_win> 0) THEN 1 ELSE 0 END) AS total_win_times
				FROM transactions t 
				WHERE  created_time BETWEEN ''',p_startTime,''' AND ''',p_endTime,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''))
				GROUP BY 
					' , d_group_interval_sql_string , ', pcb_id
				ORDER BY NULL
		);
	');
	
	SET @d_sqlString2 = CONCAT('
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
		SELECT SQL_CALC_FOUND_ROWS 
				SUM(total_win_times)/SUM(total_play_times)*100 AS hit_rate,
				SUM(total_out)/SUM(total_in)*100 AS out_rate,
				SUM(total_win + total_jp1_win + total_jp2_win + total_jp3_win + total_jp4_win)/SUM(total_bet)*100 AS win_rate_with_jp,
				SUM(total_win)/SUM(total_bet)*100 AS win_rate,
				SUM(total_jp1_win + total_jp2_win + total_jp3_win + total_jp4_win) AS total_jp_win,
				SUM(total_win + total_jp1_win + total_jp2_win + total_jp3_win + total_jp4_win) AS total_win_with_jp,
				SUM(total_in) AS total_in,
				SUM(total_out) AS total_out,
				SUM(total_bet) AS total_bet,
				SUM(total_win) AS total_win,
				SUM(total_jp1_win) AS total_jp1_win,
				SUM(total_jp2_win) AS total_jp2_win,
				SUM(total_jp3_win) AS total_jp3_win,
				SUM(total_jp4_win) AS total_jp4_win,
				SUM(total_coin_in) AS total_coin_in,
				SUM(total_bill_in) AS total_bill_in,
				SUM(total_key_in) AS total_key_in,
				SUM(total_coin_out) AS total_coin_out,
				SUM(total_bill_out) AS total_bill_out,
				SUM(total_key_out) AS total_key_out,
				SUM(total_play_times) AS total_play_times,
				SUM(total_win_times) AS total_win_times,
				', d_columns_sql_string ,
				' FROM _tmp1 t
				INNER JOIN machines m ON t.pcb_id = m.pcb_id
				INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
				INNER JOIN users u ON (un.user_id = u.id) -- AND (u.id = m.user_id)
				WHERE m.delete_flag <> 1 -- AND t.calculated_created_date < ''',d_now,'''
				' , d_group_by_sql_string , '
				ORDER BY t.calculated_created_date
			);
		');
	
	PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString1;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString2;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'SELECT *, FOUND_ROWS() AS total FROM _tmp2;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'COMMIT;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	SELECT @d_sqlString1;
   SELECT @d_sqlString2;
	
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getReportJackpot 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getReportJackpot`(
	IN `p_exeid` INT
,
	IN `p_users` TEXT
,
	IN `p_stores` TEXT
,
	IN `p_machines` TEXT
,
	IN `p_startTime` DATETIME,
	IN `p_endTime` DATETIME
,
	IN `p_groupBy` VARCHAR(50)

















)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	DECLARE d_now DATE;
	DECLARE d_pcb_ids VARCHAR(20000);
	DECLARE d_columns_sql_string VARCHAR(500);
	DECLARE d_group_by_sql_string VARCHAR(200);
	DECLARE d_no_search BOOL;
	SET d_now = DATE(DATE_ADD(NOW(), INTERVAL -6 HOUR));
	SET d_no_search = (ISNULL(p_users) AND ISNULL(p_stores) AND ISNULL(p_machines));
	
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
	DROP TEMPORARY TABLE IF EXISTS `_tmp2`;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
		(ISNULL(p_users) OR FIND_IN_SET(user_id, p_users)) AND
		(ISNULL(p_stores) OR FIND_IN_SET(store_name, p_stores)) AND
		(ISNULL(p_machines) OR FIND_IN_SET(pcb_id, p_machines));
	SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;
	
	IF p_groupBy = 'machine' THEN
	BEGIN
		SET d_columns_sql_string = '
			store_name,
			machine_name,
			t.pcb_id';
		SET d_group_by_sql_string = 'GROUP BY t.pcb_id';
	END;
	ELSEIF p_groupBy = 'user' THEN
	BEGIN
		SET d_columns_sql_string = '
			account';
		SET d_group_by_sql_string = 'GROUP BY u.id';
	END;
	ELSEIF p_groupBy = 'storename' THEN
	BEGIN
		SET d_columns_sql_string = '
			store_name';
		SET d_group_by_sql_string = 'GROUP BY store_name';
	END;
	ELSE
	BEGIN
		SET d_columns_sql_string = '
			store_name,
			machine_name,
			t.pcb_id, 
			jp_server,
			account';
		SET d_group_by_sql_string = 'GROUP BY t.created_time';
	END;
	END IF;
	
	SET @d_sqlString1 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1 AS(
			SELECT  
				jp_server, pcb_id, jp1_win, jp2_win, jp3_win, jp4_win, created_time
			FROM transactions t 
			WHERE (jp1_win > 0 OR jp2_win > 0 OR jp3_win > 0 OR jp4_win > 0) AND created_time BETWEEN ''',p_startTime,''' AND ''',p_endTime,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''))
			ORDER BY NULL
		);
	');
	
	SET @d_sqlString2 = CONCAT('
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
		SELECT SQL_CALC_FOUND_ROWS 
				SUM(jp1_win) AS total_jp1_win, SUM(jp2_win) AS total_jp2_win, SUM(jp3_win) AS total_jp3_win, SUM(jp4_win) AS total_jp4_win, t.created_time
				,', d_columns_sql_string ,
			' FROM _tmp1 t
			INNER JOIN machines m ON t.pcb_id = m.pcb_id
			INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
			INNER JOIN users u ON (un.user_id = u.id) -- AND (u.id = m.user_id)
			WHERE m.delete_flag <> 1
			' , d_group_by_sql_string , '
			ORDER BY t.created_time);
		');
	
	PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString1;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString2;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'SELECT *, FOUND_ROWS() AS total FROM _tmp2;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'COMMIT;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	#SELECT @d_sqlString1;
	#SELECT @d_sqlString2;
	
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getReportMachine 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getReportMachine`(
	IN `p_exeid` INT
,
	IN `p_users` TEXT,
	IN `p_stores` TEXT,
	IN `p_machines` TEXT,
	IN `p_startTime` DATETIME,
	IN `p_endTime` DATETIME









)
    DETERMINISTIC
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	DECLARE d_now DATE;
	DECLARE d_pcb_ids VARCHAR(20000);
	DECLARE d_columns_sql_string VARCHAR(500);
	DECLARE d_group_by_sql_string VARCHAR(200);
	DECLARE d_group_interval_sql_string VARCHAR(200);
	DECLARE d_no_search BOOL;
	SET d_now = DATE(DATE_ADD(NOW(), INTERVAL -6 HOUR));
	SET d_no_search = (ISNULL(p_machines));
	
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
	DROP TEMPORARY TABLE IF EXISTS `_tmp2`;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
		(ISNULL(p_machines) OR FIND_IN_SET(pcb_id, p_machines));
	SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;
	
	SET @d_sqlString1 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1 AS(
			SELECT  
				pcb_id,
				SUM(credit_in) AS total_in,
				SUM(credit_out) AS total_out,
				SUM(bet) AS total_bet,
				SUM(win) AS total_win,
				SUM(jp1_win) AS total_jp1_win,
				SUM(jp2_win) AS total_jp2_win,
				SUM(jp3_win) AS total_jp3_win,
				SUM(jp4_win) AS total_jp4_win,
				DATE_ADD(t.created_time, INTERVAL -6 HOUR) AS calculated_created_date,
				SUM(CASE WHEN credit_type = 3 THEN credit_in ELSE 0 END) AS total_coin_in,
				SUM(CASE WHEN credit_type = 5 THEN credit_in ELSE 0 END) AS total_bill_in,
				SUM(CASE WHEN credit_type = 1 THEN credit_in ELSE 0 END) AS total_key_in,
				SUM(CASE WHEN credit_type = 4 THEN credit_out ELSE 0 END) AS total_coin_out,
				SUM(CASE WHEN credit_type = 6 THEN credit_out ELSE 0 END) AS total_bill_out,
				SUM(CASE WHEN credit_type = 2 THEN credit_out ELSE 0 END) AS total_key_out,
				SUM(play_times) AS total_play_times,
				SUM(win_times) AS total_win_times
				FROM transactions t 
				WHERE created_time BETWEEN ''',p_startTime,''' AND ''',p_endTime,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''))
				GROUP BY 
					pcb_id
				ORDER BY NULL
		);
	');
	
	SET @d_sqlString2 = CONCAT('
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
		SELECT SQL_CALC_FOUND_ROWS *,
			total_win_times/total_play_times*100 AS hit_rate,
			total_out/total_in*100 AS out_rate,
			total_win/total_bet*100 AS win_rate,
			total_win_with_jp/total_bet*100 AS win_rate_with_jp,
			total_bet/total_play_times AS avg_bet
				FROM (SELECT  
				DATE(calculated_created_date) AS date,
				t.pcb_id,
				store_name,
				machine_name,
				account,
				SUM(total_jp1_win + total_jp2_win + total_jp3_win + total_jp4_win) AS total_jp_win,
				SUM(total_in) AS total_in,
				SUM(total_out) AS total_out,
				SUM(total_bet) AS total_bet,
				SUM(total_win) AS total_win,
				SUM(total_win + total_jp1_win + total_jp2_win + total_jp3_win + total_jp4_win) AS total_win_with_jp,
				SUM(total_jp1_win) AS total_jp1_win,
				SUM(total_jp2_win) AS total_jp2_win,
				SUM(total_jp3_win) AS total_jp3_win,
				SUM(total_jp4_win) AS total_jp4_win,
				SUM(total_coin_in) AS total_coin_in,
				SUM(total_bill_in) AS total_bill_in,
				SUM(total_key_in) AS total_key_in,
				SUM(total_coin_out) AS total_coin_out,
				SUM(total_bill_out) AS total_bill_out,
				SUM(total_key_out) AS total_key_out,
				SUM(total_play_times) AS total_play_times,
				SUM(total_win_times) AS total_win_times
				FROM _tmp1 t
			INNER JOIN machines m ON t.pcb_id = m.pcb_id
			INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
			INNER JOIN users u ON (un.user_id = u.id) -- AND (u.id = m.user_id)
			WHERE m.delete_flag <> 1 -- AND t.calculated_created_date < ''',d_now,'''
			GROUP BY 
				pcb_id
			ORDER BY t.calculated_created_date) v);
	');
	
	PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString1;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString2;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'SELECT *, FOUND_ROWS() AS total FROM _tmp2;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'COMMIT;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	-- SELECT @d_sqlString1;
	 SELECT @d_sqlString2;
	
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getReportRevenue 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getReportRevenue`(
	IN `p_exeid` INT
,
	IN `p_users` TEXT,
	IN `p_stores` TEXT,
	IN `p_machines` TEXT,
	IN `p_startTime` DATETIME,
	IN `p_endTime` DATETIME




,
	IN `p_groupBy` VARCHAR(50)


)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	DECLARE d_now DATE;
	DECLARE d_pcb_ids VARCHAR(20000);
	DECLARE d_columns_sql_string VARCHAR(500);
	DECLARE d_group_by_sql_string VARCHAR(500);
	DECLARE d_no_search BOOL;
	SET d_now = DATE(DATE_ADD(NOW(), INTERVAL -6 HOUR));
	SET d_no_search = (ISNULL(p_users) AND ISNULL(p_stores) AND ISNULL(p_machines));
	
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
	DROP TEMPORARY TABLE IF EXISTS `_tmp2`;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
		(ISNULL(p_users) OR FIND_IN_SET(user_id, p_users)) AND
		(ISNULL(p_stores) OR FIND_IN_SET(store_name, p_stores)) AND
		(ISNULL(p_machines) OR FIND_IN_SET(pcb_id, p_machines));
	SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;
	
	IF p_groupBy = 'machine' THEN
	BEGIN
		SET d_columns_sql_string = 'store_name,
			machine_name,
			t.pcb_id,
			account';
		SET d_group_by_sql_string = 'GROUP BY t.pcb_id';
	END;
	ELSEIF p_groupBy = 'user' THEN
	BEGIN
		SET d_columns_sql_string = 'account';
		SET d_group_by_sql_string = 'GROUP BY u.id';
	END;
	ELSEIF p_groupBy = 'storename' THEN
	BEGIN
		SET d_columns_sql_string = 'store_name';
		SET d_group_by_sql_string = 'GROUP BY store_name';
	END;
	END IF;
	
	SET @d_sqlString1 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1 AS(
			SELECT  
				pcb_id,
				SUM(credit_in) AS total_in,
				SUM(credit_out) AS total_out
				FROM transactions t 
				WHERE created_time BETWEEN ''',p_startTime,''' AND ''',p_endTime,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''))
				GROUP BY 
					pcb_id
				ORDER BY NULL
		);
	');
	
	SET @d_sqlString2 = CONCAT('
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
		SELECT SQL_CALC_FOUND_ROWS 
			',d_columns_sql_string,',
			total_in,
			total_out,
			total_in-total_out AS gross_net,
			total_out/total_in*100 AS out_rate
			FROM _tmp1 t
			INNER JOIN machines m ON t.pcb_id = m.pcb_id
			INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
			INNER JOIN users u ON (un.user_id = u.id) -- AND (u.id = m.user_id)
			WHERE m.delete_flag <> 1
			' , d_group_by_sql_string , '
			ORDER BY t.pcb_id);
		');
	
	PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString1;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM @d_sqlString2;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'SELECT *, FOUND_ROWS() AS total FROM _tmp2;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	PREPARE stmt FROM 'COMMIT;';
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
	
	SELECT @d_sqlString1;
	SELECT @d_sqlString2;
	
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getTopGrossNet 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getTopGrossNet`(
	IN `p_exeid` INT,
	IN `p_users` TEXT,
	IN `p_stores` TEXT



)
BEGIN
    DECLARE d_isAdmin BOOL;
    DECLARE d_lft INT;
    DECLARE d_rgt INT;
    DECLARE d_now DATE;
    DECLARE d_pcb_ids VARCHAR(20000);
    DECLARE d_no_search BOOL;
    SET d_now = DATE(DATE_ADD(NOW(), INTERVAL -6 HOUR));
    SET d_no_search = (ISNULL(p_users) AND ISNULL(p_stores));
    DROP TEMPORARY TABLE IF EXISTS `_tmp1`;
    DROP TEMPORARY TABLE IF EXISTS `_tmp2`;
    SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
    SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
    SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
        (ISNULL(p_users) OR FIND_IN_SET(user_id, p_users)) AND
        (ISNULL(p_stores) OR FIND_IN_SET(store_name, p_stores));
    SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;
    
    SET @d_sqlString1 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1(
			pcb_id INT,
			gross_net INT,
			KEY(`pcb_id`)
		);
	 ');
	 
    SET @d_sqlString2 = CONCAT('
		INSERT INTO _tmp1 
			SELECT pcb_id, (CAST(credit_in AS SIGNED) - CAST(credit_out AS SIGNED)) AS gross_net 
			FROM transactions
	      WHERE created_time BETWEEN ''',DATE_ADD(d_now, INTERVAL -7 DAY),''' AND ''',d_now,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''));
	 ');
	 
    SET @d_sqlString3 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
			SELECT m.store_name, t.pcb_id, t.gross_net FROM
			(SELECT pcb_id, SUM(gross_net) AS gross_net
				FROM _tmp1
				GROUP BY pcb_id) t
			INNER JOIN machines m ON t.pcb_id = m.pcb_id
			INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
			INNER JOIN users u ON (un.user_id = u.id)
			WHERE m.delete_flag <> 1
			ORDER BY t.gross_net DESC
			LIMIT 5
		 );
   ');
   
    PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString1;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString2;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString3;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'SELECT * FROM _tmp2;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'COMMIT;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    SELECT @d_sqlString1;
    SELECT @d_sqlString2;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getTopHitRate 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getTopHitRate`()
    COMMENT 'index'
SELECT 
store_name, machine_name, (IFNULL(SUM(bet > 0 && win > 0), 0)/IFNULL(SUM(bet > 0), 0)) AS value
FROM transactions t
INNER JOIN machines m ON t.pcb_id = m.pcb_id
GROUP BY m.pcb_id
ORDER BY value DESC
LIMIT 5//
DELIMITER ;

-- 傾印  程序 pcb.sp_getTopOutRate 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getTopOutRate`()
    COMMENT 'index'
SELECT 
store_name, machine_name, (SUM(credit_out)/SUM(credit_in)) AS value
FROM transactions t
INNER JOIN machines m ON t.pcb_id = m.pcb_id
GROUP BY m.pcb_id
ORDER BY value DESC
LIMIT 5//
DELIMITER ;

-- 傾印  程序 pcb.sp_getTopPlaytimes 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getTopPlaytimes`(
	IN `p_exeid` INT,
	IN `p_users` TEXT,
	IN `p_stores` TEXT
)
BEGIN
    DECLARE d_isAdmin BOOL;
    DECLARE d_lft INT;
    DECLARE d_rgt INT;
    DECLARE d_now DATE;
    DECLARE d_pcb_ids VARCHAR(20000);
    DECLARE d_no_search BOOL;
    SET d_now = DATE(DATE_ADD(NOW(), INTERVAL -6 HOUR));
    SET d_no_search = (ISNULL(p_users) AND ISNULL(p_stores));
    DROP TEMPORARY TABLE IF EXISTS `_tmp1`;
    DROP TEMPORARY TABLE IF EXISTS `_tmp2`;
    SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
    SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
    SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
        (ISNULL(p_users) OR FIND_IN_SET(user_id, p_users)) AND
        (ISNULL(p_stores) OR FIND_IN_SET(store_name, p_stores));
    SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;
    
    SET @d_sqlString1 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1(
			pcb_id INT,
			playtimes INT,
			KEY(`pcb_id`)
		);
	 ');
	 
    SET @d_sqlString2 = CONCAT('
		INSERT INTO _tmp1 
			SELECT pcb_id, CASE WHEN(bet > 0) THEN 1 ELSE 0 END AS playtimes
			FROM transactions
	      WHERE created_time BETWEEN ''',DATE_ADD(d_now, INTERVAL -7 DAY),''' AND ''',d_now,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''));
	 ');
	 
    SET @d_sqlString3 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
			SELECT m.store_name, t.pcb_id, t.playtimes FROM
			(SELECT pcb_id, SUM(playtimes) AS playtimes
				FROM _tmp1
				GROUP BY pcb_id) t
			INNER JOIN machines m ON t.pcb_id = m.pcb_id
			INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
			INNER JOIN users u ON (un.user_id = u.id)
			WHERE m.delete_flag <> 1
			ORDER BY t.playtimes DESC
			LIMIT 5
		 );
   ');
   
    PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString1;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString2;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString3;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'SELECT * FROM _tmp2;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'COMMIT;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    SELECT @d_sqlString1;
    SELECT @d_sqlString2;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getTopWin 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getTopWin`(
	IN `p_exeid` INT,
	IN `p_users` INT,
	IN `p_stores` INT



)
BEGIN
    DECLARE d_isAdmin BOOL;
    DECLARE d_lft INT;
    DECLARE d_rgt INT;
    DECLARE d_now DATE;
    DECLARE d_pcb_ids VARCHAR(20000);
    DECLARE d_no_search BOOL;
    SET d_now = DATE(DATE_ADD(NOW(), INTERVAL -6 HOUR));
    SET d_no_search = (ISNULL(p_users) AND ISNULL(p_stores));
    DROP TEMPORARY TABLE IF EXISTS `_tmp1`;
    DROP TEMPORARY TABLE IF EXISTS `_tmp2`;
    SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
    SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
    SELECT group_concat(pcb_id  separator ',') INTO d_pcb_ids FROM machines WHERE
        (ISNULL(p_users) OR FIND_IN_SET(user_id, p_users)) AND
        (ISNULL(p_stores) OR FIND_IN_SET(store_name, p_stores));
    SELECT CASE WHEN ISNULL(d_pcb_ids) THEN '' ELSE d_pcb_ids END INTO d_pcb_ids;
    
    SET @d_sqlString1 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp1(
			pcb_id INT,
			win INT,
			KEY(`pcb_id`)
		);
	 ');
	 
    SET @d_sqlString2 = CONCAT('
		INSERT INTO _tmp1 
			SELECT pcb_id, win+jp1_win+jp2_win+jp3_win+jp4_win AS win
			FROM transactions
	      WHERE created_time BETWEEN ''',DATE_ADD(d_now, INTERVAL -7 DAY),''' AND ''',d_now,''' AND ((',d_no_search,') OR FIND_IN_SET(pcb_id, ''',d_pcb_ids,'''));
	 ');
	 
    SET @d_sqlString3 = CONCAT('
		CREATE TEMPORARY TABLE IF NOT EXISTS _tmp2 AS(
			SELECT m.store_name, t.pcb_id, t.win FROM
			(SELECT pcb_id, SUM(win) AS win
				FROM _tmp1
				GROUP BY pcb_id) t
			INNER JOIN machines m ON t.pcb_id = m.pcb_id
			INNER JOIN user_node un ON (m.user_id = un.user_id) AND (',d_isAdmin,' OR un.lft BETWEEN ',d_lft,' AND ',d_rgt,')
			INNER JOIN users u ON (un.user_id = u.id)
			WHERE m.delete_flag <> 1
			ORDER BY t.win DESC
			LIMIT 5
		 );
   ');
   
    PREPARE stmt FROM 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString1;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString2;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM @d_sqlString3;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'SELECT * FROM _tmp2;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp1`;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'DROP TEMPORARY TABLE IF EXISTS `_tmp2`;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    PREPARE stmt FROM 'COMMIT;';
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt; 
    
    SELECT @d_sqlString1;
    SELECT @d_sqlString2;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getTopWinRate 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getTopWinRate`()
    COMMENT 'index'
SELECT 
store_name, machine_name, (Sum(win)/SUM(bet)) AS value
FROM transactions t
INNER JOIN machines m ON t.pcb_id = m.pcb_id
GROUP BY m.pcb_id
ORDER BY value DESC
LIMIT 5//
DELIMITER ;

-- 傾印  程序 pcb.sp_getTransactions 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getTransactions`(
	IN `p_exeid` INT


,
	IN `p_users` VARCHAR(10000),
	IN `p_stores` VARCHAR(10000),
	IN `p_machines` VARCHAR(10000),
	IN `p_transactiontypes` VARCHAR(10000),
	IN `p_gametypes` VARCHAR(10000)




,
	IN `p_startTime` DATETIME,
	IN `p_endTime` DATETIME


)
    DETERMINISTIC
BEGIN

	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS ( 
		SELECT m.store_name, m.pcb_id, m.machine_name, t.transaction_type, t.game_type, t.start_credit,
		 t.result_credit, t.credit_in, t.credit_out, t.bet, t.memo, t.created_time, t.credit_type, t.round_id,
	 	 t.jp1_win, t.jp2_win, t.jp3_win, t.jp4_win, t.win
		FROM
		user_node un INNER JOIN machines m ON un.user_id = m.user_id AND (d_isAdmin OR un.lft BETWEEN d_lft AND d_rgt)
		INNER JOIN transactions t ON m.pcb_id = t.pcb_id
		WHERE 
			(ISNULL(p_users) OR FIND_IN_SET(un.user_id, p_users)) AND
			(ISNULL(p_stores) OR FIND_IN_SET(m.store_name, p_stores)) AND
			(ISNULL(p_machines) OR FIND_IN_SET(m.id, p_machines)) AND
			(ISNULL(p_transactiontypes) OR FIND_IN_SET(t.transaction_type, p_transactiontypes)) AND
			(ISNULL(p_gametypes) OR FIND_IN_SET(t.game_type, p_gametypes)) AND
			t.created_time BETWEEN p_startTime AND p_endTime
		ORDER BY t.created_time ASC
	);
	SET d_total = FOUND_ROWS();
	SELECT d_total AS total,t.* FROM _tmp t;
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getUser 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getUser`(
	IN `p_exeid` INT,
	IN `p_userid` INT




)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	IF d_isAdmin OR EXISTS(SELECT 1 FROM user_node WHERE user_id = p_userid AND lft BETWEEN d_lft AND d_rgt) THEN
	BEGIN
		SELECT id, account, created_time FROM users WHERE id = p_userid;
	END;
	ELSE
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied.';
	END;
	END IF;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getUserByAccount_temp 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getUserByAccount_temp`(
	IN `p_account` VARCHAR(50)



)
BEGIN
	DECLARE exit handler for sqlexception
	BEGIN
	ROLLBACK;
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT 0;
	RESIGNAL;
	END;
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS (
		SELECT id, account, created_time FROM users WHERE account = p_account limit 1
	);
	IF NOT EXISTS(SELECT 1 FROM _tmp) THEN
		BEGIN
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Account locked. Please contact to your administrator.';
		END;
	ELSE
		SELECT id, account, created_time FROM _tmp;
	END IF;
	
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getUserPermissions 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getUserPermissions`(
	IN `p_exeid` INT,
	IN `p_userid` INT




,
	IN `p_admin` BIT

)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	IF d_isAdmin OR EXISTS(SELECT 1 FROM user_node WHERE user_id = p_userid AND lft BETWEEN d_lft AND d_rgt) THEN
	BEGIN
		SELECT u.id, u.name, CASE WHEN(ISNULL(e.id)) THEN FALSE ELSE TRUE END AS active FROM
		(SELECT p.id, p.name, p.description, p.sort FROM permissions p 
		INNER JOIN role_permission rp on p.id = rp.permission_id AND rp.role_id = (SELECT role_id FROM user_role WHERE user_id = p_exeid) WHERE admin_only=false || admin_only=p_admin) u
		LEFT JOIN
		(SELECT p.id, p.name, p.description, p.sort FROM permissions p 
		INNER JOIN role_permission rp on p.id = rp.permission_id AND rp.role_id = (SELECT role_id FROM user_role WHERE user_id = p_userid) WHERE admin_only=false || admin_only=p_admin) e
		ON u.id = e.id
		ORDER BY u.sort;
	END;
	ELSE
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied.';
	END;
	END IF;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getUsers 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getUsers`(
	IN `p_exeid` INT,
	IN `p_admin` BIT





)
BEGIN
	DECLARE d_isAdmin BOOL;
	DECLARE d_lft INT;
	DECLARE d_rgt INT;
	DECLARE d_total INT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_lft, d_rgt FROM user_node WHERE user_id = p_exeid;
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS (
		SELECT SQL_CALC_FOUND_ROWS u.id, u.account, u.state, u.created_time, u.update_time 
		FROM users u LEFT JOIN user_node un ON u.id = un.user_id AND (un.lft BETWEEN d_lft AND d_rgt OR d_isAdmin)
		WHERE u.admin = p_admin AND u.id <> p_exeid
		ORDER BY u.created_time DESC
	);
	SET d_total = FOUND_ROWS();
	SELECT d_total AS total,t.* FROM _tmp t;
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_getUsersTree 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getUsersTree`(
	IN `p_exeid` INT




)
BEGIN
	DECLARE d_exeLft INT;   
	DECLARE d_exeRgt INT;  
	DECLARE d_isAdmin BIT;
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_exeLft, d_exeRgt FROM user_node WHERE user_id = p_exeid;
	SELECT t.user_id, u.account, parent_id FROM 
	users AS u
	INNER JOIN(
	SELECT parent.user_id, parent.parent_id
	FROM user_node AS node ,
	     user_node AS parent
	WHERE node.lft BETWEEN parent.lft AND parent.rgt 
			AND (parent.lft BETWEEN d_exeLft AND d_exeRgt OR d_isAdmin)
	GROUP BY parent.user_id
	ORDER BY node.lft) t ON u.id = t.user_id
	ORDER BY parent_id;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_login 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_login`(
	IN `p_account` VARCHAR(50),
	IN `p_pwd` CHAR(128)





,
	IN `p_ip` VARCHAR(50)








)
BEGIN
	DECLARE userID int;
	DECLARE exit handler for sqlexception
	BEGIN
	ROLLBACK;
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	RESIGNAL;
	END;
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
	CREATE TEMPORARY TABLE IF NOT EXISTS _tmp AS (
		SELECT id, account, created_time, login_fail_count, encrypted_password, state FROM users WHERE account = p_account LIMIT 1
	);
	SELECT id INTO userID FROM _tmp;
	
	#account locked or no account
	IF NOT EXISTS(SELECT 1 FROM _tmp) THEN
		BEGIN
			DROP TEMPORARY TABLE IF EXISTS `_tmp`;
			INSERT INTO log_user_change(user_id, action, memo, created_time, update_time) VALUES(NULL, 1, CONCAT('Try login not exist account: ', p_account, '.IP: ', p_ip), NOW(), NOW());
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Account locked. Please contact to your administrator.';
		END;
	ELSEIF EXISTS(SELECT 1 FROM _tmp WHERE state <> 1) THEN
		BEGIN
			DROP TEMPORARY TABLE IF EXISTS `_tmp`;
			INSERT INTO log_user_change(user_id, action, memo, created_time, update_time) VALUES(NULL, 1, CONCAT('Try login not locked account: ', p_account, '.IP: ', p_ip), NOW(), NOW());
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Account locked. Please contact to your administrator.';
		END;
	ELSEIF NOT EXISTS(SELECT 1 FROM _tmp WHERE encrypted_password = p_pwd) THEN
		BEGIN
			UPDATE users SET login_fail_count = login_fail_count +1 WHERE id = userID;
			INSERT INTO log_user_change(user_id, action, memo, created_time, update_time) VALUES(userID, 1, CONCAT('Login failed: ', p_account, '.IP:', p_ip), NOW(), NOW());
			IF EXISTS(SELECT 1 FROM _tmp WHERE id = userID AND login_fail_count >= 3) THEN
				UPDATE users SET state = 2 WHERE id = userID;
			END IF;
			DROP TEMPORARY TABLE IF EXISTS `_tmp`;
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Account or password incorrect.';
		END;
	ELSEIF EXISTS(SELECT 1 FROM _tmp WHERE encrypted_password = p_pwd AND state = 1) THEN
		BEGIN
			UPDATE users SET login_fail_count = 0 WHERE id = userID;
			INSERT INTO log_user_change(user_id, action, memo, created_time, update_time) VALUES(userID, 1, CONCAT('Login: ', p_account, '.IP:', p_ip), NOW(), NOW());
			SELECT id, account, created_time FROM _tmp;
		END;
	END IF;
	DROP TEMPORARY TABLE IF EXISTS `_tmp`;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_loginPermisisons 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_loginPermisisons`(
	IN `p_userid` INT


)
SELECT p.id, p.name, CASE WHEN(ISNULL(p.id)) THEN FALSE ELSE TRUE END AS active FROM
(SELECT p.id, p.name, p.description, p.sort FROM permissions p 
INNER JOIN role_permission rp on p.id = rp.permission_id AND rp.role_id = (SELECT role_id FROM user_role WHERE user_id = p_userid)) p
ORDER BY p.sort//
DELIMITER ;

-- 傾印  程序 pcb.sp_transferMachines 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_transferMachines`(
	IN `p_exeid` INT,
	IN `p_machinids` VARCHAR(16384),
	IN `p_targetid` INT









)
proc_label: BEGIN
	DECLARE d_exeLft INT;   
	DECLARE d_exeRgt INT;  
	DECLARE d_isAdmin BIT;
	DECLARE d_machineList TEXT;   
	DECLARE d_machineStub TEXT;  
	DECLARE d_machineCount INT;
	DECLARE d_machineid INT;
	DECLARE d_ownerid INT;
	DECLARE exit handler for sqlexception
	BEGIN
	ROLLBACK;
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT 0;
	RESIGNAL;
	END;
	
	#foreach machines
	SELECT admin INTO d_isAdmin FROM users WHERE id = p_exeid;
	SELECT lft, rgt INTO d_exeLft, d_exeRgt FROM user_node WHERE user_id = p_exeid;
	SET d_machineList = CONCAT('''',REPLACE(REPLACE(p_machinids ,' ',''),',',QUOTE(',')),'''');
	SET d_machineStub = REPLACE(d_machineList,',','');
	SET d_machineCount = CASE WHEN(ISNULL(p_machinids) OR p_machinids = '') THEN 0 ELSE (LENGTH(d_machineList) - LENGTH(d_machineStub) + 1) END;
	
	#check targetid is in exeid
	IF !d_isAdmin AND !EXISTS(SELECT 1 FROM user_node WHERE user_id = p_targetid AND lft >= d_exeLft AND rgt <= d_exeRgt) THEN
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied.';
	 	LEAVE proc_label;
	END;
	END IF;

	SET @x = 0;
	START TRANSACTION;
	WHILE @x < d_machineCount DO
		SET @x = @x + 1;
		SET d_machineid = SUBSTRING_INDEX(SUBSTRING_INDEX(p_machinids, ',', @x), ',', -1);
		#check the machines is in exeid OR exeid is admin
		SELECT user_id INTO d_ownerid FROM machines WHERE id = d_machineid;
		
		IF ISNULL(d_ownerid) THEN
		BEGIN
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Machine not exist.';
		 	LEAVE proc_label;
		END;
		END IF;
		
		IF !d_isAdmin AND !EXISTS(SELECT 1 FROM user_node WHERE user_id = d_ownerid AND lft >= d_exeLft AND rgt <= d_exeRgt) THEN #include self
		BEGIN
			SIGNAL SQLSTATE '45000'
		 	SET MESSAGE_TEXT = 'Permission denied.';
		 	LEAVE proc_label;
		END;
		END IF;
		
		#update machine owenr to targetid
		UPDATE machines SET user_id = p_targetid WHERE id = d_machineid;
	END WHILE;
	COMMIT;
	SELECT 1;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_userNodeAdd_temp 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_userNodeAdd_temp`(
	IN `p_parentid` INT,
	IN `p_userid` INT





,
	IN `p_result` INT


)
BEGIN
	DECLARE EXIT handler for sqlexception
	BEGIN
	SET p_result = false;
	ROLLBACK;
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	END;
	
	START TRANSACTION;
	
	SELECT 1 FROM user_node WHERE rgt > (SELECT rgt FROM user_node
	WHERE user_id = p_parentid) OR lft > (SELECT rgt FROM user_node
	WHERE user_id = p_parentid) OR user_id = p_parentid FOR UPDATE;
	SELECT rgt INTO @myRight FROM user_node WHERE user_id = p_parentid;
	
	UPDATE user_node SET rgt = rgt + 2 WHERE rgt > @myRight;
	UPDATE user_node SET lft = lft + 2 WHERE lft > @myRight;
	
	INSERT INTO user_node(user_id, parent_id, lft, rgt) VALUES(p_userid, p_parentid, @myRight + 1, @myRight + 2);
	
	COMMIT;
	SET p_result = true;
END//
DELIMITER ;

-- 傾印  程序 pcb.sp_userNodeMove 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_userNodeMove`(
	IN `p_exeid` INT,
	IN `p_userid` INT,
	IN `p_targetid` INT








)
proc_label:BEGIN
	DECLARE exit handler for sqlexception
	BEGIN
	ROLLBACK;
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT 0;
	RESIGNAL;
	END;
		
	#Set IDs
	SET @dirId := p_userid; #folder (subtree) you wanna move
	SET @targetId := p_targetid; #target
	
	START TRANSACTION;
	SELECT Count(1) FROM user_node FOR UPDATE;
	
	#get datas
	SET @isRoot = false;
	SET @exeIsAdmin = false;
	SET @userIsAdmin = false;
	SET @targetIsAdmin = false;
	SELECT admin INTO @exeIsAdmin FROM users WHERE id = p_exeid;
	SELECT admin INTO @userIsAdmin FROM users WHERE id = p_userid;
	SELECT admin INTO @targetIsAdmin FROM users WHERE id = p_targetid;
	SELECT parent_id=0 INTO @isRoot FROM user_node WHERE user_id = p_userid;
	
	#root can not be change
	IF (SELECT COUNT(1) FROM user_node WHERE user_id = p_exeid OR user_id = p_userid OR user_id = p_targetid) <> 3 THEN
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied(user node not correct).';
	 	LEAVE proc_label;
	END;
	END IF;
	
	#parent can not move to it's child
	IF EXISTS(SELECT 1 FROM user_node WHERE user_id = p_userid AND rgt > (SELECT rgt FROM user_node WHERE user_id = p_targetid)) THEN
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied(parent can not move to child).';
	 	LEAVE proc_label;
	END;
	END IF;
	
	#root can not be change
	IF @isRoot THEN
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied(Root can not change).';
	 	LEAVE proc_label;
	END;
	END IF;
	
	#check admin can't below agency
	IF @userIsAdmin AND !@targetIsAdmin THEN
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied(Admin can not below Agency).';
	 	LEAVE proc_label;
	END;
	END IF;
	
	#check userid and targetid are below exeid.
	SELECT rgt, lft, rgt-lft+1 INTO @exe_rgt, @exe_lft, @dir_size FROM user_node WHERE user_id = p_exeid;
	IF NOT EXISTS(SELECT 1 FROM user_node WHERE @exeIsAdmin OR (rgt < @exe_rgt AND lft > @exe_lft AND user_id = p_targetid)) OR 
		NOT EXISTS(SELECT 1 FROM user_node WHERE @exeIsAdmin OR (rgt < @exe_rgt AND lft > @exe_lft AND user_id = p_userid)) THEN
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Permission denied.(user or target not be managed by current user.)';
	 	LEAVE proc_label;
	END;
	END IF;
	
	SELECT rgt, lft, rgt-lft+1 INTO @dir_rgt, @dir_lft, @dir_size FROM user_node WHERE user_id = @dirId;
	
	#put the moving tree aside (lft and rgt columns must allow negative int)
	UPDATE user_node SET lft = 0-lft, rgt = 0-rgt WHERE lft BETWEEN @dir_lft AND @dir_rgt;
	
	#fill the empty space        
	UPDATE user_node SET rgt = rgt-@dir_size WHERE rgt > @dir_rgt;
	UPDATE user_node SET lft = lft-@dir_size WHERE lft > @dir_rgt;
	
	#get datas of the target-folder      
	SELECT lft INTO @target_lft FROM user_node WHERE user_id = @targetId;
	
	#create space in the target-folder        
	UPDATE user_node SET rgt = rgt+@dir_size WHERE rgt >= @target_lft;
	UPDATE user_node SET lft = lft+@dir_size WHERE lft > @target_lft;
	
	#update parentid
	UPDATE user_node SET parent_id = p_targetid WHERE user_id = p_userid;
	
	#edit all nodes in the moving-tree
	UPDATE user_node SET
	   lft     = 0 - lft - (@dir_lft - @target_lft - 1), #this formula fits for all moving directions
	   rgt     = 0 - rgt - (@dir_lft - @target_lft - 1)
	WHERE 
	   lft < 0;
	   
   SELECT rgt, lft INTO @targetRgt, @targetLft FROM user_node WHERE user_id = p_targetid;
	SELECT * FROM role_permission rp2 WHERE 
		rp2.role_id	IN (SELECT role_id FROM user_role ur INNER JOIN user_node un ON un.user_id > @targetLft AND un.user_id < @targetRgt AND ur.user_id = un.user_id) AND 
		rp2.permission_id NOT IN (SELECT permission_id FROM role_permission rp INNER JOIN user_role ur ON ur.user_id = p_targetid AND rp.role_id = ur.role_id);
	
	#DELETE permission where parent node not own.
	CREATE TEMPORARY TABLE IF NOT EXISTS temp_table AS (SELECT permission_id FROM role_permission rp INNER JOIN user_role ur ON ur.user_id = p_targetid AND rp.role_id = ur.role_id);
   SELECT rgt, lft INTO @targetRgt, @targetLft FROM user_node WHERE user_id = p_targetid;
	DELETE FROM role_permission WHERE 
		role_id	IN (SELECT role_id FROM user_role ur INNER JOIN user_node un ON un.lft > @targetLft AND un.rgt < @targetRgt AND ur.user_id = un.user_id) AND 
		permission_id NOT IN (SELECT permission_id FROM temp_table);
	COMMIT;
END//
DELIMITER ;

-- 傾印  程序 pcb.tempExec 結構
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `tempExec`(p_exeid int, p_account varchar(50), p_pwd varchar(50), p_admin bit, p_createdtime datetime)
BEGIN
	DECLARE `_rollback` BOOL DEFAULT 0;
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET `_rollback` = 1;
	DECLARE exit handler for sqlwarning
		BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p1 as RETURNED_SQLSTATE  , @p2 as MESSAGE_TEXT;
		ROLLBACK;
	END;
	START TRANSACTION;
	IF NOT EXISTS (SELECT 1 FROM users WHERE account = p_account) THEN
	BEGIN	
			INSERT INTO users(account, encrypted_password, admin, created_time) VALUES(p_account, p_pwd, p_admin, p_createdtime);
			SET @userID = LAST_INSERT_ID();
			SET @exeIsAdmin = EXISTS(SELECT 1 FROM users WHERE id = p_exeid AND admin = 1);
			IF p_admin AND @exeIsAdmin THEN
			BEGIN
				SELECT @defaultAdminRoleID := id,id FROM roles WHERE name = "coreuser";
				#exe account is default role, add default role to new account
				SELECT @defaultAdminRoleID,p_exeid;
				IF EXISTS (SELECT 1 FROM user_role WHERE user_id = p_exeid AND role_id = @defaultAdminRoleID) THEN
				BEGIN
					INSERT INTO user_role(user_id, role_id) VALUES(@userID, @defaultAdminRoleID);
				END;
				#exe account is specific permissions, add inherit permissions to new account.
				ELSE
				BEGIN
					INSERT INTO roles(name, description) VALUES(p_account, "specific permissions");
					SET @roleID = LAST_INSERT_ID();
					INSERT INTO user_role(user_id, role_id) VALUES(@userID, @roleID);
					#INSERT INTO role_permission(role_id, permission_id) 
						SELECT @roleID AS role_id, permission_id FROM role_permission source WHERE source.id = (SELECT role_id FROM user_role WHERE user_id = p_exeid) ;
				END;
				END IF;
			END;
			ELSE
			BEGIN
				#exe account is admin, add default agency role to new account.
				#exe account is agency and default role, add default agency role to new account.
				#exe account is agency and specific permissions, add inherit permissions to new account.
			SELECT 1;
			END;
			END IF;
	END;
	ELSE
	BEGIN
		SIGNAL SQLSTATE '45000'
	 	SET MESSAGE_TEXT = 'Account Name duplicated.'; 	
	END;
	END IF;
	COMMIT;
END//
DELIMITER ;

-- 傾印  表格 pcb.transactions 結構
CREATE TABLE IF NOT EXISTS `transactions` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `pcb_id` int(10) unsigned NOT NULL,
  `round_id` bigint(20) unsigned NOT NULL,
  `currency_id` int(10) unsigned NOT NULL,
  `money_to_credit_radio` int(10) unsigned NOT NULL COMMENT '這邊是1元換幾分',
  `transaction_type` int(10) unsigned NOT NULL,
  `start_credit` int(10) unsigned NOT NULL,
  `result_credit` int(10) unsigned NOT NULL,
  `credit_in` int(10) unsigned NOT NULL DEFAULT '0',
  `credit_out` int(10) unsigned NOT NULL DEFAULT '0',
  `credit_type` int(10) unsigned NOT NULL DEFAULT '0',
  `bet` int(10) unsigned NOT NULL DEFAULT '0',
  `original_bet` int(10) unsigned NOT NULL DEFAULT '0',
  `win` int(10) unsigned NOT NULL DEFAULT '0',
  `jp1_win` int(11) unsigned NOT NULL DEFAULT '0',
  `jp2_win` int(11) unsigned NOT NULL DEFAULT '0',
  `jp3_win` int(11) unsigned NOT NULL DEFAULT '0',
  `jp4_win` int(11) unsigned NOT NULL DEFAULT '0',
  `jp_server` int(11) unsigned NOT NULL DEFAULT '0',
  `game_type` int(10) unsigned NOT NULL DEFAULT '0',
  `game_id` int(11) unsigned NOT NULL DEFAULT '0',
  `memo` json DEFAULT NULL,
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `calculated_created_date` datetime GENERATED ALWAYS AS ((`created_time` + interval -(6) hour)) VIRTUAL,
  `play_times` tinyint(4) GENERATED ALWAYS AS ((case when (`bet` > 0) then 1 else 0 end)) VIRTUAL,
  `win_times` tinyint(4) GENERATED ALWAYS AS ((case when ((`bet` > 0) and ((`win` > 0) or (`jp4_win` > 0) or (`jp3_win` > 0) or (`jp2_win` > 0) or (`jp1_win` > 0))) then 1 else 0 end)) VIRTUAL,
  PRIMARY KEY (`id`),
  KEY `currency_id` (`currency_id`),
  KEY `transaction_type` (`transaction_type`),
  KEY `credit_type` (`credit_type`),
  KEY `game_type` (`game_type`),
  KEY `pcb_id` (`pcb_id`),
  KEY `created_time` (`created_time`),
  KEY `bet` (`bet`),
  KEY `original_bet` (`original_bet`),
  KEY `win` (`win`),
  KEY `round_id` (`round_id`),
  KEY `game_id` (`game_id`),
  KEY `jp1_win` (`jp1_win`),
  KEY `jp2_win` (`jp2_win`),
  KEY `jp3_win` (`jp3_win`),
  KEY `jp4_win` (`jp4_win`),
  KEY `calculated_created_date` (`calculated_created_date`),
  CONSTRAINT `FK_transactions_currencies` FOREIGN KEY (`currency_id`) REFERENCES `currencies` (`id`),
  CONSTRAINT `FK_transactions_machines` FOREIGN KEY (`pcb_id`) REFERENCES `machines` (`pcb_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='交易資料表，包含SPIN、儲值、兌回、JP等';

-- 正在傾印表格  pcb.transactions 的資料：~0 rows (大約)
DELETE FROM `transactions`;
/*!40000 ALTER TABLE `transactions` DISABLE KEYS */;
/*!40000 ALTER TABLE `transactions` ENABLE KEYS */;

-- 傾印  表格 pcb.users 結構
CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `account` varchar(36) NOT NULL,
  `encrypted_password` char(128) NOT NULL,
  `current_sign_in_ip` varchar(15) NOT NULL DEFAULT '',
  `last_sign_in_ip` varchar(15) NOT NULL DEFAULT '',
  `admin` bit(1) NOT NULL DEFAULT b'0',
  `state` int(10) unsigned NOT NULL DEFAULT '1',
  `login_fail_count` int(10) unsigned NOT NULL DEFAULT '0',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `account` (`account`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8 COMMENT='使用者主表';

-- 正在傾印表格  pcb.users 的資料：~15 rows (大約)
DELETE FROM `users`;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` (`id`, `account`, `encrypted_password`, `current_sign_in_ip`, `last_sign_in_ip`, `admin`, `state`, `login_fail_count`, `created_time`, `update_time`) VALUES
	(2, 'admin', '4b657d24c15b3282936b2a3133565e32ae9d6be0b661fd9feca82697adf28c7a4424826be97ba63c1a5e5249ad95e385b2a51cabccc924b2849f1cc5db35b16b', '', '', b'1', 1, 0, '2018-05-11 14:15:26', '2018-07-16 17:19:43'),
	(3, 'Sky3060', '5d20c6743608ff7267a6d791f18f24095de75fdec04196e9dab8e549a5ef93e793a4a95c68a346868f54c861c0bf4c739a402b5d3ed787f4e6efc3dc6515fd3f', '', '', b'1', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(4, 'Spot4679', '8fc36c69c9444ee2db91414d4470ffe4ee6a7829979f714952824f5078c1b5bac5409494e8c450755ba13c1935446e6d3ec538c2555597001627356ab70e1cff', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(5, 'Snapdragon3924', '54661ad3f077d591fc85cf3be0b9228acfec89c6abcef344d7ab73b2495d5bf8811cecf96b967f1cd5e722e2e8d47d918b4477063e30d7a6f2e9f835cabb3a7d', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(6, 'Fog6845', '190298ead007247613cef16c1f08444420ef0de6871a3416a0fe2928122af84e52e8802a9ad1d684363d8869e8e1d7ea7c19d1cfd7f1a4095f49f3dcb8368d17', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(7, 'Denim895', '28459a65c2681d6da11b5d36075a37d8c8b84ab24108ba1031c3d301fa55fdd8c34e745a1c8ade9d469b81fbf1ce86d3c82c6b45989a1835a88a1ded3409fac3', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(8, 'Daffodil2944', '405c6310108fc5cd95a7eb6c34f6718c4b10cd0139af8901c7185e9958d516c9836695b58cfb06d850f9ea45e82432c3fedbe5fb2d71781aed59c4c1ce787413', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(9, 'Ripple4836', '92c1e40cc9adaaf198a4edcbabb14397afca1f60dd0efbf7e1f36f9e90be9d65c077c69583dce6c7a61d8bf18e0e4136b5617fb0eede9cd7f10a60469b795fb4', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(10, 'Fantasy9388', '444e68f7fba28d0d312420f2edb72215c031021e26579a6df2a032e9e7e6ed442a8ef99e1bb8f28c2df5405f15096e6ee2093e12188b4932c209036e6c70af8d', '', '', b'1', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(11, 'Prairie2859', '16dbaf077bf251b317b9e33bc05d906bfb0348dcd62bbc3728a3558c0bef24c6311ed3d7495c39bcfc9114433f5101bfa0815ad0f0612344a9ed33bdfa406d78', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(12, 'Mangrove7200', '49962d14b9cdb4cd86ac17915d84e2aa18a0ba6eda9e90b89b17596a27ee8fd739bdcfc9d2aa7020f3bbc8dcaf465529461b2a9ed5bc94677cc590e25012126a', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(13, 'Clever6114', '79bbb71ac2e59c15633d61de12ca32fe04fc5a7311aaf8290a0b941bca8ecb7e0291a48d718ef563eabfd9cfbc97aade818769cb16c84ad3fc66bb8bc1ddd458', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(14, 'Lake9086', '5d47b45f24ebdf154eafe6190a16fb9ca2cc18ba530a4b3bf104fe1e1793bdbc52368473b75173120879455c0bf0622f17e70c0f06f3c4cd62ef0929d26bdf8a', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(15, 'Hazel9422', '8c137de18e9ce5f5d2a17404bc73dcac87b2274ab9e3d7d87f522d11e4f19fd388109de8f91d97177c4144a77aabf08297daf6c882b5fb673f31393fdf884198', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(16, 'Bitter1390', 'd07f800634c3b5fee9cefa40214a0a72f09b50ae4fad2885c2f4146707245269bf33a61108c8e904617d0f1e7287a1fd121e08c4da136c0beedfe74ac5dc6949', '', '', b'0', 1, 0, '2018-07-25 11:35:16', '2018-07-25 11:35:16');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;

-- 傾印  表格 pcb.user_node 結構
CREATE TABLE IF NOT EXISTS `user_node` (
  `user_id` int(10) unsigned NOT NULL,
  `parent_id` int(10) unsigned NOT NULL,
  `lft` bigint(20) NOT NULL,
  `rgt` bigint(20) NOT NULL,
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`user_id`),
  KEY `parent_id_lft_rgt` (`parent_id`,`lft`,`rgt`),
  CONSTRAINT `FK_user_node_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='使用者節點描述表';

-- 正在傾印表格  pcb.user_node 的資料：~15 rows (大約)
DELETE FROM `user_node`;
/*!40000 ALTER TABLE `user_node` DISABLE KEYS */;
INSERT INTO `user_node` (`user_id`, `parent_id`, `lft`, `rgt`, `created_time`, `update_time`) VALUES
	(2, 0, 1, 30, '2018-05-17 17:38:46', '2018-07-25 11:35:16'),
	(3, 2, 8, 29, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(4, 3, 19, 28, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(5, 4, 26, 27, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(6, 4, 24, 25, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(7, 3, 9, 18, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(8, 7, 16, 17, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(9, 7, 14, 15, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(10, 2, 2, 7, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(11, 10, 5, 6, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(12, 4, 22, 23, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(13, 4, 20, 21, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(14, 10, 3, 4, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(15, 7, 12, 13, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(16, 7, 10, 11, '2018-07-25 11:35:16', '2018-07-25 11:35:16');
/*!40000 ALTER TABLE `user_node` ENABLE KEYS */;

-- 傾印  表格 pcb.user_role 結構
CREATE TABLE IF NOT EXISTS `user_role` (
  `user_id` int(10) unsigned NOT NULL,
  `role_id` int(10) unsigned NOT NULL,
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`user_id`,`role_id`),
  KEY `FK_user_role_roles` (`role_id`),
  CONSTRAINT `FK_user_role_roles` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`),
  CONSTRAINT `FK_user_role_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='使用者角色對應表';

-- 正在傾印表格  pcb.user_role 的資料：~15 rows (大約)
DELETE FROM `user_role`;
/*!40000 ALTER TABLE `user_role` DISABLE KEYS */;
INSERT INTO `user_role` (`user_id`, `role_id`, `created_time`, `update_time`) VALUES
	(2, 1, '2018-05-15 16:50:10', '2018-06-22 09:30:33'),
	(3, 1, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(4, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(5, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(6, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(7, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(8, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(9, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(10, 1, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(11, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(12, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(13, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(14, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(15, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16'),
	(16, 2, '2018-07-25 11:35:16', '2018-07-25 11:35:16');
/*!40000 ALTER TABLE `user_role` ENABLE KEYS */;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
